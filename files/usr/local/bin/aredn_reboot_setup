#! /usr/bin/lua
--[[

	Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
	Copyright (C) 2021, 2024 Tim Wilkinson
	See Contributors file for additional contributors

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

	Additional Terms:

	Additional use restrictions exist on the AREDN速 trademark and logo.
		See AREDNLicense.txt for more info.

	Attributions to the AREDN速 Project must be retained in the source code.
	If importing this code into a new or existing project attribution
	to the AREDN速 project must be added to the source code.

	You must not misrepresent the origin of the material contained within.

	Modified versions must be modified to attribute to the original source
	and be marked in reasonable ways as differentiate it from the original
	version

--]]

require("aredn.utils")
require("aredn.info")
require("aredn.hardware")
require("uci")

local mac2 = aredn.info.get_nvram("mac2")
local dtdmac = aredn.info.get_nvram("dtdmac")

local cfg = {}
local firstuse = true

-- Load the defaults
local keys = {}
for line in io.lines("/etc/config.mesh/_setup.default")
do
    if not (line:match("^%s*#") or line:match("^%s*$")) then
        line = line:gsub("<MAC2>", mac2):gsub("<DTDMAC>", dtdmac)
        local k, v = line:match("^(%S+)%s*=%s*(.*)%s*$")
        cfg[k] = v
        -- add default config key
        keys[#keys + 1] = k
    end
end

-- Override with the current config
for line in io.lines("/etc/config.mesh/_setup")
do
    if not (line:match("^%s*#") or line:match("^%s*$")) then
        local k, v = line:match("^(%S+)%s*=%s*(.*)%s*$")
        if cfg[k] then
            cfg[k] = v
        end
    end
end

--
-- If this is the very first time we do some once only setup
--
if firstuse then
    -- Radio
    if aredn.hardware.get_radio_count() > 0 then
        local wifi_intf = "wlan0"
        local defaultwifi = aredn.hardware.get_default_channel(wifi_intf)
        cfg.wifi_intf = wifi_intf
        cfg.wifi_channel = defaultwifi.channel
        cfg.wifi_chanbw = defaultwifi.bandwidth
    end

    -- DHCP
    local dmz_dhcp_base, net = ("1" .. decimal_to_ip((ip_to_decimal("10." .. mac2) * 8) % 0x1000000)):match("(%d+%.%d+%.%d+%.)(%d+)")
    net = tonumber(net)
    local dmz_lan_ip = dmz_dhcp_base .. (net + 1)
    local dmz_dhcp_start = net + 2
    local dmz_dhcp_limit = 5 -- dmz_mode == 3
    local dmz_dhcp_end = dmz_dhcp_start + dmz_dhcp_limit - 1
    cfg.dmz_mode = 3
    cfg.dmz_dhcp_end = dmz_dhcp_end
    cfg.dmz_dhcp_limit = dmz_dhcp_limit
    cfg.dmz_dhcp_start = dmz_dhcp_start
    cfg.dmz_lan_ip = dmz_dhcp_base .. (net + 1)
    cfg.dmz_lan_mask = "255.255.255.248"
end

-- And save
table.sort(keys)
local f = io.open("/etc/config.mesh/_setup", "w")
if not f then
    print "Failed to update /etc/config.mesh/_setup"
    os.exit(-1)
end
for _, key in ipairs(keys)
do
    local v = cfg[key]
    if v then
        f:write(key .. " = " .. v .. "\n")
    end
end
f:close()

-- set variables in special conditions
if cfg.dmz_mode == "0" or cfg.wan_proto == "disabled" then
    local c = uci.cursor("/etc/config.mesh")
    c:set("aredn", "@wan[0]", "olsrd_gw", "0")
    c:commit("aredn")
end
-- end special condition overrides

os.execute("/usr/local/bin/node-setup")

if nixio.fs.stat("/tmp/reboot-required") then
    print "Rebooting node"
    -- Make sure to remove the user settings we carried into this upgrade so we dont apply them again
    os.execute("/sbin/mount_root done")
    os.remove("/sysupgrade.tgz")
    os.execute("reboot")
end
