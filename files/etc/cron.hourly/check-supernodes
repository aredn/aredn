#!/usr/bin/lua
--[[

	Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
	Copyright (C) 2023 Tim Wilkinson
	See Contributors file for additional contributors

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

	Additional Terms:

	Additional use restrictions exist on the AREDN速 trademark and logo.
		See AREDNLicense.txt for more info.

	Attributions to the AREDN速 Project must be retained in the source code.
	If importing this code into a new or existing project attribution
	to the AREDN速 project must be added to the source code.

	You must not misrepresent the origin of the material contained within.

	Modified versions must be modified to attribute to the original source
	and be marked in reasonable ways as differentiate it from the original
	version

--]]

require("uci")
require("aredn.utils")
require("aredn.olsr")

local dns_file = "/tmp/dnsmasq.d/supernode.conf"

local c = uci.cursor()
local dest

-- If we're not a supernode and we have supernode support enabled, look for a supernode
if c:get("aredn", "@supernode[0]", "enable") ~= "1" and c:get("aredn", "@supernode[0]", "support") ~= "0" then

	-- Find the closest supernode to use as a nameserver (Babel)
	local bbest = { destination = nil, metric = 99999999 }
	for name in nixio.fs.dir("/var/run/arednlink/hosts")
	do
		for line in io.lines("/var/run/arednlink/hosts/" .. name)
		do
			if line:match("^[0-9%.]+%s+supernode%.") then
				local metric = capture("/sbin/ip route show table 20 | grep " .. name):match(" metric (%d+)")
				if metric then
					metric = tonumber(metric)
					if metric < bbest.metric then
						bbest.metric = metric
						bbest.destination = name
					end
				end
				break
			end
		end
	end
	dest = bbest.destination

	if not dest then
		-- Find the closest supernode to use as a nameserver (OLSR)
		local sn = {}
		for _, hna in ipairs(aredn.olsr.getOLSRHNA())
		do
			if hna.genmask == 8 and hna.destination == "10.0.0.0" then
				sn[hna.gateway] = true
			end
		end
		local best = { destination = nil, etx = 99999999 }
		for _, route in ipairs(aredn.olsr.getOLSRRoutes())
		do
			if sn[route.destination] and route.etx < best.etx then
				best = route
			end
		end
		if not best.destination then
			os.exit(0)
		end
		dest = best.destination
	end

end

local desthost = dest and (nixio.getnameinfo(dest) or dest):gsub("^supernode%.", "")
local revdest = dest and ("," .. dest) or ""

-- Update the dns and restart network if necessary
local dns = ""
if desthost then
	dns = dns .. "#" .. desthost .. "\n"
end
dns = dns .. "server=/local.mesh/" .. (dest or "") .. "\nrev-server=10.0.0.0/8" .. revdest .. "\nrev-server=172.31.0.0/16" .. revdest  .. "\nrev-server=172.30.0.0/16" .. revdest
if nixio.fs.stat("/etc/44net.conf") then
	for line in io.lines("/etc/44net.conf")
	do
		dns = dns .. "\nrev-server=" .. line .. revdest
	end
end
dns = dns .. "\n"
local odns = ""
local f = io.open(dns_file)
if f then
	odns = f:read("*a")
	f:close()
end
if odns ~= dns then
	f = io.open(dns_file, "w+")
	if f then
		f:write(dns)
		f:close()
		os.execute("/etc/init.d/dnsmasq restart")
	end
end
