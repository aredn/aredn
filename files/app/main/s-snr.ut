{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
{%

const wifiiface = uci.get("network", "wifi", "device");
const mac = substr(request.env.QUERY_STRING || "", 4) || "00:00:00:00:00:00:";

let f = fs.popen(`iw ${wifiiface} survey dump`);
if (f) {
    const reN = /noise:[ \t]+([0-9\-]+) dBm/;
    let ff = false;
    for (let l = f.read("line"); length(l); l = f.read("line")) {
        if (index(l, "[in use]") !== -1) {
            ff = true;
        }
        else if (ff) {
            const m = match(l, reN);
            if (m) {
                noise = int(m[1]);
                break;
            }
        }
    }
    f.close();
}
let signal = 0;
f = fs.popen(`/usr/sbin/iw ${wifiiface} station get ${mac} 2>/dev/null`);
if (f) {
    const reS = /signal:[ \t]+([0-9\-]+)/;
    for (let l = f.read("line"); length(l); l = f.read("line")) {
        const m = match(l, reS);
        if (m) {
            signal = int(m[1]);
            break;
        }
    }
    f.close();
}
if (signal < 0) {
    print(`{"s":${signal},"n":${noise}\}`);
}
else {
    print("");
}

%}
