{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
{%
print("<script>\n");
print("window.mesh = {hosts:{");

const reHosts = /^([0-9.]+)[ \t]+([^ \t]+)/;
const reServices = /^([^|]+)\|(tcp|udp)\|(.+)$/;
const reRoute = /^([^ /]+) via .+ metric ([^ ]+) /;

const hd = fs.opendir("/var/run/arednlink/hosts/");
if (hd) {
    for (let entry = hd.read(); entry; entry = hd.read()) {
        if (entry !== "." && entry !== "..") {
            const f = fs.open(`/var/run/arednlink/hosts/${entry}`);
            if (f) {
                let originator = null;
                for (let l = f.read("line"); l; l = f.read("line")) {
                    const m = match(trim(l), reHosts);
                    if (m) {
                        const ip = m[1];
                        const host = m[2];
                        if (!originator) {
                            originator = ip;
                            print(`"${originator}":[`);
                        }
                        if (index(host, "mid") !== 0 && index(host, "dtdlink.") !== 0 && index(host, "xlink") !== 0 && index(host, "lan.") !== 0) {
                            if (originator == ip) {
                                print(`["${host}"],`);
                            }
                            else {
                                print(`["${host}","${ip}"],`);
                            }
                        }
                    }
                }
                if (originator) {
                    print(`],`);
                }
                f.close();
            }
        }
    }
    hd.close();
}

print("},services:{");

const sd = fs.opendir("/var/run/arednlink/services/");
if (sd) {
    for (let entry = sd.read(); entry; entry = sd.read()) {
        if (entry !== "." && entry !== "..") {
            const f = fs.open(`/var/run/arednlink/services/${entry}`);
            if (f) {
                let empty = true;
                for (let l = f.read("line"); length(l); l = f.read("line")) {
                    const m = match(trim(l), reServices);
                    if (m) {
                        if (empty) {
                            empty = false;
                            print(`"${entry}":[`);
                        }
                        print(`{n:"${m[3]}",u:"${m[1]}"},`);
                    }
                }
                if (!empty) {
                    print(`],`);
                }
                f.close();
            }
        }
    }
    sd.close();
}

print(`},etx:[["${configuration.getSettingAsString("wifi_ip")}",0],`);
const f = fs.popen("exec /sbin/ip route show table 20 2>/dev/null");
if (f) {
    for (let l = f.read("line"); length(l); l = f.read("line")) {
        const m = match(l, reRoute);
        if (m) {
            print(`["${m[1]}",${m[2]}],`);
        }
    }
    f.close();
}
print("].sort((a,b)=>a[1]-b[1])};\n");
print("</script>\n");

%}
