{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
<script>
    const TIMEOUT = {{inner.timeout}} * 1000;
    const COUNTDOWN = {{inner.countdown}};
    const DELAY = {{inner.delay}} * 1000;
    const LOCATION = "{{inner.location}}";
    function reload() {
        const start = Date.now();
        const req = new XMLHttpRequest();
        req.open('GET', LOCATION);
        req.onreadystatechange = function() {
            if (req.readyState === 4) {
                if (req.status === 200) {
                    window.location = LOCATION;
                }
                else {
                    const time = Date.now() - start;
                    setTimeout(reload, time > TIMEOUT ? 0 : TIMEOUT - time);
                }
            }
        }
        req.timeout = TIMEOUT;
        try {
            req.send(null);
        }
        catch (_) {
        }
    }
    const start = Date.now()
    function cdown() {
        const div = document.getElementById("countdown");
        if (div) {
            const t = Math.round(COUNTDOWN - (Date.now() - start) / 1000);
            div.innerHTML = t <= 0 ? "&nbsp;" : `Time Remaining: ${new Date(1000 * t).toISOString().substring(15, 19)}`;
            const cdp = document.getElementById("cdprogress");
            if (cdp) {
                if (t < 0) {
                    cdp.removeAttribute("value");
                }
                else {
                    cdp.setAttribute("value", cdp.getAttribute("max") - t);
                }
            }
        }
    }
    setInterval(cdown, 1000);
    setTimeout(reload, DELAY);
</script>
