{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
{%
    let pwchanged = false;
    if (request.env.REQUEST_METHOD === "PUT") {
        if (request.args.revert) {
            configuration.revertChanges();
        }
        else if (request.args.commit) {
            pwchanged = configuration.isPasswordChanged();
            configuration.commitChanges();
        }
    }
    if (request.headers["hx-trigger-name"] === "commit" && index(request.headers.referer, "/a/status") > 0) {
        print(`<div id="main-container" hx-swap-oob="true">${_R("status")}</div>`);
    }
%}
<div id="changes" {{request.headers["hx-boosted"] ? "" : "hx-swap-oob='true'"}}>{%
    let changes = 0;
    let reboot = false;
    if (pwchanged) {
        %}<script>location.reload();</script>{%
    }
    if (auth.isAdmin) {
        changes = configuration.countChanges();
        if (fs.access("/tmp/reboot-required/reboot")) {
            reboot = true;
        }
    }
    if (changes > 0) {
    %}
        <div>
            Pending changes: {{changes}}
            <button name="commit" value="1" hx-put="/a/status/e/changes" hx-request='{"timeout":5000}'>Commit</button>
            <button name="revert" value="1" hx-put="/a/status/e/changes">Revert</button>
        </div>
        <script>
        (function(){
            const commit = htmx.find("#changes button[name=commit]");
            htmx.on(commit, "click", e => {
                const target = e.target;
                htmx.find("#changes button[name=revert]").style.display = "none";
                target.style.width = "110px";
                target.style.textAlign = "left";
                target.innerText = "Committing ";
                let dots = ".";
                const timer = setInterval(_ => {
                    if (!document.contains(target)) {
                        clearInterval(timer);
                    }
                    target.innerText = "Committing " + dots;
                    dots += ".";
                    if (dots.length > 3) {
                        dots = "";
                    }
                }, 300);
            });
            function retry()
            {
                htmx.ajax("GET", "/a/changes", { timeout: 5000, target: "#changes", headers: { "HX-Trigger-Name": "commit" } }).then(null, retry);
            }
            htmx.on(commit, "htmx:timeout", retry);
        })();
        </script>
    {% }
    else if (reboot) {
    %}
        <div>
            Reboot required:
            <button name="reboot" value="1" hx-get="/a/status/e/reboot" hx-target="body">Reboot</button>
        </div>
    {% } %}</div>
