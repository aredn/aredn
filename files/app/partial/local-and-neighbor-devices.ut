{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
{%
    let links = {};
    const o = olsr.getLinks();
    for (let i = 0; i < length(o); i++) {
        links[o[i].remoteIP] = o[i];
    }
    function calcColor(tracker)
    {
        if (!tracker) {
            return "unknown";
        }
        if (tracker.blocked) {
            if (tracker.blocks.user) {
                return "blocked by user";
            }
            if (tracker.blocks.signal) {
                return "blocked low signal";
            }
            if (tracker.blocks.signal) {
                return "blocked too far";
            }
            if (tracker.blocks.quality) {
                return "blocked by errors or latency";
            }
            if (tracker.blocks.dup || tracker.blocks.dtd) {
                return "blocked as duplicate";
            }
            return "blocked";
        }
        if (!tracker.routable) {
            return "idle";
        }
        const quality = tracker.quality;
        if (!type(quality)) {
            return "unknown";
        }
        else if (quality < 40) {
            return "bad";
        }
        else if (quality < 50) {
            return "poor";
        }
        else if (quality < 75) {
            return "okay";
        }
        else if (quality < 95) {
            return "good";
        }
        else {
            return "excellent";
        }
    };
    function calcBitrate(tracker)
    {
        const txbitrate = tracker.tx_bitrate;
        if (txbitrate) {
            const rxbitrate = tracker.rx_bitrate;
            if (rxbitrate) {
                return sprintf("%.1f", ((txbitrate + rxbitrate) * 5 + 0.5) / 10);
            }
            else {
                return sprintf("%.1f", (txbitrate * 10 + 0.5) / 10);
            }
        }
        return "-";
    }
%}
<div class="noctrl" hx-target="#ctrl-modal">
    <div class="section-title">Local Nodes</div>
    <div class="section" style="line-height:18px;margin-top:-16px">
        <div class="cols">
            <div class="heading" style="flex:0.75"></div>
            <div class="heading ts cols stats">
                {% if (!request.mobile) { %}
                <div>lq</div><div>nlq</div><div>snr</div><div>n snr</div><div>errors</div><div>mbps</div><div>{{units.distanceUnit()}}</div>
                {% } else { %}
                <div>lq</div><div>nlq</div><div>snr</div><div>n snr</div><div>errors</div>
                {% } %}
            </div>
        </div>
        {%
            const llist = [];
            const nlist = [];
            const hlist = lqm.getHidden();
            const t = lqm.getTrackers();
            const trackers = {};
            for (mac in t) {
                const tmac = t[mac];
                if (tmac.ip) {
                    trackers[tmac.ip] = tmac;
                }
            }
            const links = olsr.getLinks();
            for (let i = 0; i < length(links); i++) {
                const link = links[i];
                const tracker = trackers[link.remoteIP];
                if (link.ifName === "br-dtdlink") {
                    if (tracker && tracker.distance >= 100) {
                        push(nlist, { name: tracker.hostname || `|${link.remoteIP}`, tracker: tracker, link: link });
                    }
                    else {
                        push(llist, { name: (tracker && tracker.hostname) || `|${link.remoteIP}`, tracker: tracker, link: link });
                    }
                }
                else {
                    push(nlist, { name: (tracker && tracker.hostname) || `|${link.remoteIP}`, tracker: tracker, link: link });
                }
                delete trackers[link.remoteIP];
            }
            for (let remoteIP in trackers)
            {
                const tracker = trackers[remoteIP];
                if (tracker.type == "DtD" && tracker.distance < 100) {
                    push(llist, { name: tracker.hostname || `|${remoteIP}`, tracker: tracker, link: null });
                }
                else {
                    push(nlist, { name: tracker.hostname || `|${remoteIP}`, tracker: tracker, link: null });
                }
            }
            if (length(llist) > 0) {
                sort(llist, (a, b) => a.name == b.name ? 0 : a.name < b.name ? -1 : 1);
                for (let i = 0; i < length(llist); i++) {
                    const entry = llist[i];
                    const tracker = entry.tracker;
                    const link = entry.link;
                    const status = calcColor(tracker);
                    if (tracker) {
                        print(`<div class="ctrl cols status ${status}" hx-get="status/e/neighbor-device?m=${tracker.mac}" title="Link status: ${status}">`);
                    }
                    else {
                        print(`<div class="ctrl cols status unknown" title="Link status: unknown">`);
                    }
                    const lq = link && link.lossMultiplier ? (min(100, int(100 * link.linkQuality * 65536 / link.lossMultiplier)) + "%") : "-";
                    const nlq = link && link.lossMultiplier ? (min(100, int(100 * link.neighborLinkQuality * 65536 / link.lossMultiplier)) + "%") : "-";
                    if (substr(entry.name, 0, 1) !== "|") {
                        print(`<div class='h'><a onclick="event.stopPropagation()" href='http://${entry.name}.local.mesh'>${entry.name}</a></div>`);
                    }
                    else {
                        const ip = substr(entry.name, 1);
                        print(`<div class='h'><a onclick="event.stopPropagation()" href='http://${ip}'>${ip}</a></div>`);
                    }
                    print("<div class='ts cols stats'>");
                    if (!request.mobile) {
                        print(`<div>${lq}</div><div>${nlq}</div><div></div><div></div><div>${type(tracker && tracker.quality) ? (100 - tracker.quality) + "%" : "-"}</div><div></div><div></div>`);
                    }
                    else {
                        print(`<div>${lq}</div><div>${nlq}</div><div></div><div></div><div>${type(tracker && tracker.quality) ? (100 - tracker.quality) + "%" : "-"}</div>`);
                    }
                    print("</div></div>");
                }
            }
            else {
                print("<div>None</div>");
            }
        %}
    </div>
</div>
<div class="noctrl" hx-target="#ctrl-modal">
    <div class="section-title">Neighborhood Nodes</div>
    <div class="section" style="line-height:18px">
    {%
        if (length(nlist) > 0) {
            sort(nlist, (a, b) => a.name == b.name ? 0 : a.name < b.name ? -1 : 1);
            for (let i = 0; i < length(nlist); i++) {
                const entry = nlist[i];
                const tracker = entry.tracker;
                const link = entry.link;
                const status = calcColor(tracker);
                if (tracker) {
                    print(`<div class="ctrl cols status ${status}" hx-get="status/e/neighbor-device?m=${tracker.mac}" title="Link status: ${status}">`);
                }
                else {
                    print(`<div class="ctrl cols status unknown" title="Link status: unknown">`);
                }
                const lq = link && link.lossMultiplier ? (min(100, int(100 * link.linkQuality * 65536 / link.lossMultiplier)) + "%") : "-";
                const nlq = link && link.lossMultiplier ? (min(100, int(100 * link.neighborLinkQuality * 65536 / link.lossMultiplier)) + "%") : "-";
                let icon = "";
                let title = "";
                switch (tracker && tracker.type || "Unknown") {
                    case "RF":
                        title = "RF ";
                        icon = "wifi";
                        break;
                    case "DtD":
                        title = "DtD ";
                        icon = "twoarrow";
                        break;
                    case "Xlink":
                        title = "Xlink ";
                        icon = "plane";
                        break;
                    case "Tunnel":
                        title = "Legacy tunnel ";
                        icon = "globe";
                        break;
                    case "Wireguard":
                        title = "Wireguard tunnel ";
                        icon = "globe";
                        break;
                    default:
                        break;
                }
                if (substr(entry.name, 0, 1) !== "|") {
                    print(`<div class='h'><a onclick="event.stopPropagation()" href='http://${entry.name}.local.mesh'>${entry.name}<div class="icon ${icon}"></div></a></div>`);
                }
                else {
                    const ip = substr(entry.name, 1);
                    print(`<div class='h'><a onclick="event.stopPropagation()" href='http://${ip}'>${ip}<div class="icon ${icon}"></div></a></div>`);
                }
                print("<div class='ts cols stats'>");
                if (tracker) {
                    let d = "-";
                    if ("distance" in tracker) {
                        d = units.meters2distance(tracker.distance);
                        if (d < 1) {
                            d = "< 1";
                        }
                        else {
                            d = sprintf("%.1f", d);
                        }
                    }
                    print(`<div>${lq}</div><div>${nlq}</div><div>${tracker.snr || "-"}</div><div>${tracker.rev_snr || "-"}</div><div>${type(tracker.quality) ? (100 - tracker.quality) + "%" : "-"}</div><div>${calcBitrate(tracker)}</div><div>${d}</div>`);
                }
                else {
                    print(`<div>${lq}</div><div>${nlq}</div><div></div><div></div><div></div><div></div><div></div>`);
                }
                print("</div></div>");
            }
        }
        else {
            print("<div>None</div>");
        }
    %}
    </div>
</div>
{% if (length(hlist) > 0) { %}
<div class="noctrl">
    <div class="section-title">Hidden Nodes</div>
    <div class="section" style="line-height:18px">
    {%
        sort(hlist, (a, b) => a.hostname == b.hostname ? 0 : a.hostname < b.hostname ? -1 : 1);
        for (let i = 0; i < length(hlist); i++) {
            const hostname = hlist[i].hostname;
            print(`<div class="idle" class='h'><a onclick="event.stopPropagation()" title='Link status: hidden' href='http://${hostname}.local.mesh'>${hostname}</a></div>`);
        }
    %}
    </div>
</div>
{% } %}
