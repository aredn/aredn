#!/usr/bin/lua
--[[

    Part of AREDN -- Used for creating Amateur Radio Emergency Data Networks
    Copyright (C) 2022 Tim Wilkinson
    See Contributors file for additional contributors

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Additional Terms:

    Additional use restrictions exist on the AREDN(TM) trademark and logo.
        See AREDNLicense.txt for more info.

    Attributions to the AREDN Project must be retained in the source code.
    If importing this code into a new or existing project attribution
    to the AREDN project must be added to the source code.

    You must not misrepresent the origin of the material contained within.

    Modified versions must be modified to attribute to the original source
    and be marked in reasonable ways as differentiate it from the original
    version

--]]

require("uci")
require("nixio")
local info = require("aredn.info")

local node = info.get_nvram("node")

local q = os.getenv("QUERY_STRING") or ""
local server = q:match("server=([^&]*)")
local protocol = q:match("protocol=([^&]*)") or "tcp"

print "Content-type: text/html\r"
print "Cache-Control: no-store\r"
print("Access-Control-Allow-Origin: *\r")
print("\r")
if uci.cursor():get("aredn", "@iperf[0]", "enable") == "0" then
    print("<html><head><title>CLIENT DISABLED</title></head><body><pre>iperf is disabled</pre></body></html>")
elseif not server then
    print("<html><head></head><body><pre>Provide a server name to run a test between this client and a server [/cgi-bin/iperf?server=&lt;ServerName&gt;&amp;protocol=&lt;udp|tcp&gt;]</pre></body></html>")
elseif server:match("[^%w%-%.]") then
    print("<html><head><title>ERROR</title></head><body><pre>Illegal server name</pre></body></html>")
else
    -- Using io.popen here causes the script to terminate (a bug?), so we have this workaround
    if os.execute('if [ "$(pidof iperf3)" = "" ]; then exit 0; else exit 1; fi') ~= 0 then 
        print("<html><head><title>BUSY</title></head><body><pre>iperf server busy</pre></body></html>")
        return
    end
    if server == "" then
        os.execute("iperf3 -s -D -1 --idle-timeout 20 -B " .. node)
        nixio.nanosleep(1, 0)
        print("<html><head><title>RUNNING</title></head><body><pre>iperf server running</pre></body></html>")
    else
        if not server:match("%.") then
            server = server .. ".local.mesh"
        end
        local status = ""
        local f = io.popen("wget -q -O - 'http://" .. server .. ":8080/cgi-bin/iperf?server=' 2>&1")
        if f then
            status = f:read("*a")
            f:close()
        end
        if status:match("running") then
            print("<html><head><title>SUCCESS</title></head><body><pre>Client: " .. node .. "\nServer: " .. server .. "\n" .. io.popen("p=$$;setsid sh -c \"(sleep 20; kill $p)\" > /dev/null 2>&1 & /usr/bin/iperf3 --forceflush -b 0 -Z -c " .. server .. (protocol == "udp" and " -u" or "") .. " 2>&1"):read("*a") .. "</pre></body></html>")
        elseif status:match("iperf is disabled") then
            print("<html><head><title>SERVER DISABLED</title></head><body><pre>iperf server is disabled</pre></body></html>")
        else
            print("<html><head><title>SERVER ERROR</title></head><body><pre>iperf server failed to start server</pre></body></html>")
        end
    end
end
