#!/usr/bin/lua
--[[

    Part of AREDN -- Used for creating Amateur Radio Emergency Data Networks
    Copyright (C) 2022 Tim Wilkinson
    See Contributors file for additional contributors

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Additional Terms:

    Additional use restrictions exist on the AREDN(TM) trademark and logo.
        See AREDNLicense.txt for more info.

    Attributions to the AREDN Project must be retained in the source code.
    If importing this code into a new or existing project attribution
    to the AREDN project must be added to the source code.

    You must not misrepresent the origin of the material contained within.

    Modified versions must be modified to attribute to the original source
    and be marked in reasonable ways as differentiate it from the original
    version

--]]

require("uci")
require("nixio")
require("aredn.utils")
local info = require("aredn.info")

local node = info.get_nvram("node")

local q = os.getenv("QUERY_STRING") or ""
local server = q:match("server=([^&]*)")
local protocol = q:match("protocol=([^&]*)") or "tcp"
local kill = q:match("kill=1") and true or false

print "Content-type: text/html\r"
print "Cache-Control: no-store\r"
print("Access-Control-Allow-Origin: *\r")
print("\r")
if uci.cursor():get("aredn", "@iperf[0]", "enable") == "0" then
    print("<html><head><title>CLIENT DISABLED</title></head><body><pre>iperf is disabled</pre></body></html>")
elseif not server then
    print("<html><head><title>ERROR</title></head><body><pre>Provide a server name to run a test between this client and a server [/cgi-bin/iperf?server=&lt;ServerName&gt;&amp;protocol=&lt;udp|tcp&gt;]</pre></body></html>")
elseif server:match("[^%w%-%.]") then
    print("<html><head><title>ERROR</title></head><body><pre>Illegal server name</pre></body></html>")
else

    if server == "" then
        -- iperf server
        if kill then
            os.execute("/usr/bin/killall -9 iperf3 > /dev/null 2>&1")
        else
            if io.popen("/bin/pidof iperf3"):read("*a") ~= "" then
                print("<html><head><title>BUSY</title></head><body><pre>iperf server busy</pre></body></html>")
                return
            end
        end
        local first = true
        local running = io.popen("/usr/bin/iperf3 -s -1 --idle-timeout 20 --forceflush -B 0.0.0.0")
        if not running then
            print("<html><head><title>SERVER ERROR</title></head><body><pre>iperf server failed to start</pre></body></html>")
            return
        end
        running:read("*l")
        print("<html><head><title>RUNNING</title></head><body><pre>iperf server running</pre></body></html>")
        io.flush()
        return
    else
        -- iperf client
        if not server:match("%.") then
            server = server .. ".local.mesh"
        end
        local ip = iplookup(server)
        if not ip then
            print("<html><head><title>SERVER ERROR</title></head><body><pre>iperf no such server</pre></body></html>")
        else
            local remote = io.popen("/usr/bin/wget -O - 'http://" .. ip .. ":8080/cgi-bin/iperf?" .. (kill and "kill=1&" or "") .. "server=' 2>&1")
            if not remote then
                print("<html><head><title>CLIENT ERROR</title></head><body><pre>iperf failed to call remote server</pre></body></html>")
                return
            end
            while true
            do
                local line = remote:read("*l")
                if not line then
                    print("<html><head><title>ERROR</title></head><body><pre>iperf unknown error</pre></body></html>")
                    break
                elseif line:match("CLIENT DISABLED") then
                    print("<html><head><title>SERVER DISABLED</title></head><body><pre>iperf server is disabled</pre></body></html>")
                    break
                elseif line:match("BUSY") then
                    print("<html><head><title>SERVER BUSY</title></head><body><pre>iperf server is busy</pre></body></html>")
                    break
                elseif line:match("ERROR") then
                    print("<html><head><title>SERVER ERROR</title></head><body><pre>iperf server error</pre></body></html>")
                    break
                elseif line:match("RUNNING") then
                    local running = io.popen("/usr/bin/iperf3 --forceflush --rcv-timeout 20000 -b 0 -Z -c " .. ip .. (protocol == "udp" and " -u" or "") .. " -l 16K 2>&1")
                    if not running then
                        print("<html><head><title>CLIENT ERROR</title></head><body><pre>iperf client failed</pre></body></html>")
                        break
                    end
                    print("<html><head><title>SUCCESS</title></head>")
                    io.flush()
                    print("<body><pre>Client: " .. node .. "\nServer: " .. server .. "\n" .. running:read("*a") .. "</pre></body></html>")
                    break
                end
            end
            remote:close()
        end
    end
end
