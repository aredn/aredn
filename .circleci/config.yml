version: 2.1

######################################
# PIPELINE PARAMETERS
######################################
parameters:
  action:
    type: enum
    enum: [ no_action, nightly_build, nightly_babel_build, release_build ]
    default: no_action
  release_version:
    type: string
    default: "NO_RELEASE_VERSION_SET"


######################################
# REUSABLE COMMANDS
######################################
commands:
  update_config_mk:
    description: "Update variables in config.mk"
    steps:
      - run:
          name: Update Config.mk
          command:  |
            export MY_WORKING_DIRECTORY=`pwd`
            printf -v BUILD_DATE '%(%Y%m%d)T' -1
            sed -i "s/NoCall/${BUILD_DATE}/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/MAKE_ARGS=-j3/MAKE_ARGS=-j9/g" ${MY_WORKING_DIRECTORY}/config.mk
            cat ${MY_WORKING_DIRECTORY}/config.mk

  update_babel_config_mk:
    description: "Update variables in config.mk for babel"
    steps:
      - run:
          name: Update Config.mk
          command:  |
            export MY_WORKING_DIRECTORY=`pwd`
            printf -v BUILD_DATE '%(%Y%m%d)T' -1
            sed -i "s/NoCall/babel-${BUILD_DATE}/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/snapshots/snapshots_babel/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/MAKE_ARGS=-j3/MAKE_ARGS=-j9/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/develop/babel/g" ${MY_WORKING_DIRECTORY}/feeds.conf
            cat ${MY_WORKING_DIRECTORY}/config.mk
  
  update_release_config_mk:
    description: "Update variables in config.mk for release"
    steps:
      - run:
          name: Update Config.mk Release
          command:  |
            export MY_WORKING_DIRECTORY=`pwd`
            sed -i "s/FW_VERSION=\$(PRIVATE_BUILD_VERSION)-\$(GIT_COMMIT)/FW_VERSION=\$(PRIVATE_BUILD_VERSION)/g" ${MY_WORKING_DIRECTORY}/Makefile
            sed -i "s/NoCall/<< pipeline.parameters.release_version >>/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/snapshots/releases\/3\/25\/<< pipeline.parameters.release_version >>/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/MAKE_ARGS=-j3/MAKE_ARGS=-j9/g" ${MY_WORKING_DIRECTORY}/config.mk
            sed -i "s/develop/<< pipeline.parameters.release_version >>/g" ${MY_WORKING_DIRECTORY}/feeds.conf
            cat ${MY_WORKING_DIRECTORY}/config.mk

  create_workspace:
    description: "Create shared workspace"
    steps:
      - run:
          name: "Create workspace"
          command:  |
            make prepare
 
  build_ath79:
    description: "Build ath79/generic and ath79/mikrotik"
    steps:
      - run:
          name: Build ath79/generic
          command: make MAINTARGET=ath79 SUBTARGET=generic ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ath79/mikrotik
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ath79/mikrotik/ath10k
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=ath10k ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ath79/mikrotik/nand
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=nand ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ath79/nand
          command: make MAINTARGET=ath79 SUBTARGET=nand ${BUILD_DEBUG_OPTS}

  build_ipq40xx:
    description: "Build ipq40xx/generic and ipq40xx/mikrotik"
    steps:
      - run:
          name: Build ipq40xx/generic
          command: make MAINTARGET=ipq40xx SUBTARGET=generic ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ipq40xx/mikrotik
          command: make MAINTARGET=ipq40xx SUBTARGET=mikrotik ${BUILD_DEBUG_OPTS}

  build_x86:
    description: "BUild x86/64"
    steps:
      - run:
          name: Build x64/64
          command: make MAINTARGET=x86 SUBTARGET=64 ${BUILD_DEBUG_OPTS}

  build_ramips:
    description: "Build ramips/mt7621"
    steps:
      - run:
          name: Build ramips/mt7621
          command: make MAINTARGET=ramips SUBTARGET=mt7621 ${BUILD_DEBUG_OPTS}

  build_ramips_and_morse:
    description: "Build ramips/mt7621 and ramips/mt76x8 and Morse"
    steps:
      - run:
          name: Build ramips/mt7621
          command: make MAINTARGET=ramips SUBTARGET=mt7621 ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ramips/mt7621/morse
          command: make MAINTARGET=ramips SUBTARGET=mt7621 ALTTARGET=morse ${BUILD_DEBUG_OPTS}
      - run:
          name: Build ramips/mt76x8/morse
          command: make MAINTARGET=ramips SUBTARGET=mt76x8 ALTTARGET=morse ${BUILD_DEBUG_OPTS}

  build_mediatek:
    description: "Build mediatek/filogic"
    steps:
      - run:
          name: Build mediatek/filogic
          command: make MAINTARGET=mediatek SUBTARGET=filogic ${BUILD_DEBUG_OPTS}

  compress_and_deploy_nightly:
    description: "Compress and Deploy"
    steps:
      - run:
          name: Compress build files
          command: tar -cjf ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${MY_WORKING_DIRECTORY}/${ARTIFACTS_DIR} .
      - run:
          name: Deploy Files
          command: scp -P ${SSH_PORT} -o StrictHostKeyChecking=no ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} ${SSH_USER}@${SSH_HOST2}:${TARGET_DIR}

  compress_and_deploy_babel:
    description: "Compress and Deploy"
    steps:
      - run:
          name: Compress build files
          command: tar -cjf ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${MY_WORKING_DIRECTORY}/${ARTIFACTS_DIR} .
      - run:
          name: Deploy Files
          command: scp -P ${SSH_PORT} -o StrictHostKeyChecking=no ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} ${SSH_USER}@${SSH_HOST2}:${TARGET_DIR_BABEL}
  
######################################
# JOBS
######################################
jobs:
  build:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder

    steps:
      - checkout
      - update_config_mk
      - run:
          name: Build ath79/generic
          command: make MAINTARGET=ath79 SUBTARGET=generic ${BUILD_DEBUG_OPTS}
          no_output_timeout: 2h
      - run:
          name: Build ath79/mikrotik
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ${BUILD_DEBUG_OPTS}
          no_output_timeout: 1h
      - run:
          name: Build ath79/mikrotik/ath10k
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=ath10k ${BUILD_DEBUG_OPTS}
          no_output_timeout: 1h
      - run:
          name: Build ath79/mikrotik/nand
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=nand ${BUILD_DEBUG_OPTS}
          no_output_timeout: 1h
      - run:
          name: Build ath79/nand
          command: make MAINTARGET=ath79 SUBTARGET=nand ${BUILD_DEBUG_OPTS}
          no_output_timeout: 1h
      - run:
          name: Build ipq40xx/generic
          command: make MAINTARGET=ipq40xx SUBTARGET=generic ${BUILD_DEBUG_OPTS}
          no_output_timeout: 2h
      - run:
          name: Build ipq40xx/mikrotik
          command: make MAINTARGET=ipq40xx SUBTARGET=mikrotik ${BUILD_DEBUG_OPTS}
          no_output_timeout: 1h
      - run:
          name: Build x64/64
          command: make MAINTARGET=x86 SUBTARGET=64 ${BUILD_DEBUG_OPTS}
          no_output_timeout: 2h
      - run:
          name: Build ramips/mt7621
          command: make MAINTARGET=ramips SUBTARGET=mt7621 ${BUILD_DEBUG_OPTS}
          no_output_timeout: 2h
      - run:
          name: Build mediatek/filogic
          command: make MAINTARGET=mediatek SUBTARGET=filogic ${BUILD_DEBUG_OPTS}
          no_output_timeout: 2h
      - run:
          name: Compress build files
          command: tar -cjf ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${MY_WORKING_DIRECTORY}/${ARTIFACTS_DIR} .
      - run:
          name: Deploy Files
          command: scp -P ${SSH_PORT} -o StrictHostKeyChecking=no ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} ${SSH_USER}@${SSH_HOST2}:${TARGET_DIR}

  build_nightly_prepare:
    resource_class: small
    docker:
      - image: arednmesh/builder
    steps:
      - checkout
      - update_config_mk
      - create_workspace
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - .

  build_babel_prepare:
    resource_class: small
    docker:
      - image: arednmesh/builder
    steps:
      - checkout
      - update_babel_config_mk
      - create_workspace
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - .

  build_job_ath79:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_ath79
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/ath79
            - openwrt/bin/packages/mips_24kc

  build_job_ipq40xx:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_ipq40xx
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/ipq40xx
            - openwrt/bin/packages/arm_cortex-a7_neon-vfpv4

  build_job_x86:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_x86
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/x86
            - openwrt/bin/packages/x86_64

  build_job_ramips:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_ramips
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/ramips
            - openwrt/bin/packages/mipsel_24kc

  build_job_ramips_and_morse:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_ramips_and_morse
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/ramips
            - openwrt/bin/packages/mipsel_24kc
    
  build_job_mediatek:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - build_mediatek
      - persist_to_workspace:
          root: /home/aredn/project
          paths:
            - openwrt/bin/targets/mediatek
            - openwrt/bin/packages/aarch64_cortex-a53

  build_nightly_finalize:
    resource_class: small
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - compress_and_deploy_nightly
  
  build_babel_finalize:
    resource_class: small
    docker:
      - image: arednmesh/builder
    steps:
      - attach_workspace:
          at: /home/aredn/project
      - compress_and_deploy_babel
  
  build_release:
    resource_class: xlarge
    docker:
      - image: arednmesh/builder

    steps:
      - checkout
      - update_release_config_mk
      - run:
          name: Build ath79/generic
          command: make MAINTARGET=ath79 SUBTARGET=generic
          no_output_timeout: 2h
      - run:
          name: Build ath79/mikrotik
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik
          no_output_timeout: 1h
      - run:
          name: Build ath79/mikrotik/ath10k
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=ath10k
          no_output_timeout: 1h
      - run:
          name: Build ath79/mikrotik/nand
          command: make MAINTARGET=ath79 SUBTARGET=mikrotik ALTTARGET=nand
          no_output_timeout: 1h
      - run:
          name: Build ath79/nand
          command: make MAINTARGET=ath79 SUBTARGET=nand
          no_output_timeout: 1h
      - run:
          name: Build ipq40xx/generic
          command: make MAINTARGET=ipq40xx SUBTARGET=generic
          no_output_timeout: 2h
      - run:
          name: Build ipq40xx/mikrotik
          command: make MAINTARGET=ipq40xx SUBTARGET=mikrotik
          no_output_timeout: 1h
      - run:
          name: Build x64/64
          command: make MAINTARGET=x86 SUBTARGET=64
          no_output_timeout: 2h
      - run:
          name: Build ramips/mt7621
          command: make MAINTARGET=ramips SUBTARGET=mt7621
          no_output_timeout: 2h
      - run:
          name: Build ramips/mt7621/morse
          command: make MAINTARGET=ramips SUBTARGET=mt7621 ALTARGET=morse
          no_output_timeout: 2h
      - run:
          name: Build mediatek/filogic
          command: make MAINTARGET=mediatek SUBTARGET=filogic
          no_output_timeout: 2h
      - run:
          name: Compress build files
          command: tar -cjf ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${MY_WORKING_DIRECTORY}/${ARTIFACTS_DIR} .
      - run:
          name: Deploy Files
          command: scp -P ${SSH_PORT} -o StrictHostKeyChecking=no ~/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} ${SSH_USER}@${SSH_HOST2}:${TARGET_DIR}
  
  check2build:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Retrieve last build info and check
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c ' ~/needs2build.sh ${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_BRANCH} ${CIRCLE_SHA1}'"
      - run:
          name: Check2build failure (build not needed)
          when: on_fail
          command: circleci-agent step halt
  
  check2buildbabel:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Retrieve last babel build info and check
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c ' ~/needs2buildbabel.sh ${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_BRANCH} ${CIRCLE_SHA1}'"
      - run:
          name: Check2build failure (build not needed)
          when: on_fail
          command: circleci-agent step halt

  save_build_info:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Save last build info
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c ' echo ${CIRCLE_SHA1} > ~/build_info/${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME}_${CIRCLE_BRANCH}'"

  save_babel_build_info:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Save last babel build info
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c ' echo ${CIRCLE_SHA1} > ~/build_info_babel/${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME}_${CIRCLE_BRANCH}'"

  process_artifacts_nightly:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Untar Files
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'tar -xjf ${TARGET_DIR}/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${TARGET_DIR}'"
      - run:
          name: Empty nightly dir
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'rm -rf ${NIGHTLY_DIR}'"
      - run:
          name: Create nightly dir
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mkdir -p ${NIGHTLY_DIR}'"
      - run:
          name: Move targets
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ${TARGET_DIR}/targets ${NIGHTLY_DIR}'"
      - run:
          name: Move packages
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ${TARGET_DIR}/packages ${NIGHTLY_DIR}'"

  process_babel_artifacts_nightly:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Untar Files
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'tar -xjf ${TARGET_DIR_BABEL}/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${TARGET_DIR_BABEL}'"
      - run:
          name: Empty babel dir
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'rm -rf ${NIGHTLY_DIR_BABEL}'"
      - run:
          name: Create babel dir
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mkdir -p ${NIGHTLY_DIR_BABEL}'"
      - run:
          name: Move babel targets
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ${TARGET_DIR_BABEL}/targets ${NIGHTLY_DIR_BABEL}'"
      - run:
          name: Move babel packages
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ${TARGET_DIR_BABEL}/packages ${NIGHTLY_DIR_BABEL}'"

  process_artifacts_release:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Untar Files
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'tar -xjf ${TARGET_DIR}/${CIRCLE_BRANCH}_${ARTIFACTS_FILE} -C ${TARGET_DIR}'"

  changelog_nightly:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Generate changelog.md
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c \"github_changelog_generator -u ${CIRCLE_PROJECT_USERNAME} -p ${CIRCLE_PROJECT_REPONAME} -t ${GITHUB_TOKEN} --bug-labels __ignore__ --enhancement-labels 'enhancement,Enhancement,bug,Bug,new ui feature request,new ui,new hardware support' --enhancement-label '**Bug fixes and Enhancements:**' --no-issues-wo-labels\""
      - run:
          name: Move changelog
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ~/CHANGELOG.md ${NIGHTLY_DIR}'"

  readme_nightly:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Fetch README.md
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'wget https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/README.md'"
      - run:
          name: Move README.md
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ~/README.md ${NIGHTLY_DIR}/readme.md'"
      - run:
          name: Fetch SUPPORTED_DEVICES.md
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'wget https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/SUPPORTED_DEVICES.md'"
      - run:
          name: Move SUPPORTED_DEVICES.md
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c 'mv ~/SUPPORTED_DEVICES.md ${NIGHTLY_DIR}/SUPPORTED_DEVICES.md'"

  afs_collector:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Run AFS collector
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "sh -c '${DOWNLOADS_DOCROOT}/afs/misc/collect.py ${DOWNLOADS_DOCROOT} ${DOWNLOADS_DOCROOT}/afs/www'"

  post_to_slack:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Post to Slack
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "./post-nightly.sh $(printf '%(%Y%m%d)T')-$(echo ${CIRCLE_SHA1} | cut -c '-7')"

  post_babel_to_slack:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run:
          name: Post to Slack
          command: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST2} "./post-nightly.sh babel-$(printf '%(%Y%m%d)T')-$(echo ${CIRCLE_SHA1} | cut -c '-7')"
      
  no_action:
    machine:
      image: ubuntu-2004:2023.02.1
    steps:
      - run: echo "No action needed"

######################################
# Workflows
######################################
workflows:
  no_action:
    when:
      equal: [ no_action, << pipeline.parameters.action >> ]
    jobs:
      - no_action

  nightly_build:
    when:
      equal: [ nightly_build, << pipeline.parameters.action >> ]
    jobs:
      - check2build
      - build_nightly_prepare:
          requires:
            - check2build
      - build_job_ath79:
          requires:
            - build_nightly_prepare
      - build_job_ipq40xx:
          requires:
            - build_nightly_prepare
      - build_job_x86:
          requires:
            - build_nightly_prepare
      - build_job_ramips:
          requires:
            - build_nightly_prepare
      - build_job_mediatek:
          requires:
            - build_nightly_prepare
      - build_nightly_finalize:
          requires:
            - build_job_ath79
            - build_job_ipq40xx
            - build_job_x86
            - build_job_ramips
            - build_job_mediatek
      - process_artifacts_nightly:
          requires:
            - build_nightly_finalize
      - readme_nightly:
          requires:
            - process_artifacts_nightly
      - changelog_nightly:
          requires:
            - process_artifacts_nightly
      - afs_collector:
          requires:
            - process_artifacts_nightly
      - save_build_info:
          requires:
            - process_artifacts_nightly
      - post_to_slack:
          requires:
            - afs_collector
  
  nightly_babel_build:
    when:
      equal: [ nightly_babel_build, << pipeline.parameters.action >> ]
    jobs:
      - check2buildbabel
      - build_babel_prepare:
          requires:
            - check2buildbabel
      - build_job_ath79:
          requires:
            - build_babel_prepare
      - build_job_ipq40xx:
          requires:
            - build_babel_prepare
      - build_job_x86:
          requires:
            - build_babel_prepare
      - build_job_ramips_and_morse:
          requires:
            - build_babel_prepare
      - build_job_mediatek:
          requires:
            - build_babel_prepare
      - build_babel_finalize:
          requires:
            - build_job_ath79
            - build_job_ipq40xx
            - build_job_x86
            - build_job_ramips_and_morse
            - build_job_mediatek
      - process_babel_artifacts_nightly:
          requires:
            - build_babel_finalize
      - afs_collector:
          requires:
            - process_babel_artifacts_nightly
      - save_babel_build_info:
          requires:
            - process_babel_artifacts_nightly
      - post_babel_to_slack:
          requires:
            - afs_collector

  release_build:
    when:
      equal: [ release_build, << pipeline.parameters.action >> ]
    jobs:
      - build_release
      - process_artifacts_release:
          requires:
            - build_release 
      - readme_nightly:
          requires:
            - process_artifacts_release
      - changelog_nightly:
          requires:
            - process_artifacts_release
      - afs_collector:
          requires:
            - process_artifacts_release
      - save_build_info:
          requires:
            - process_artifacts_release
