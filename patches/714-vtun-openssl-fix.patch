Index: openwrt/feeds/arednpackages/net/vtun/patches/102-vtun.patch
===================================================================
--- /dev/null
+++ openwrt/feeds/arednpackages/net/vtun/patches/102-vtun.patch
@@ -0,0 +1,287 @@
+diff -NarU5 a/lfd_encrypt.c b/lfd_encrypt.c
+--- a/lfd_encrypt.c	2008-01-07 16:35:32.000000000 -0600
++++ b/lfd_encrypt.c	2019-05-24 19:29:40.402280758 -0500
+@@ -93,15 +93,15 @@
+ int dec_init_first_time;
+ unsigned long sequence_num;
+ char * pkey;
+ char * iv_buf;
+ 
+-EVP_CIPHER_CTX ctx_enc;	/* encrypt */
+-EVP_CIPHER_CTX ctx_dec;	/* decrypt */
++EVP_CIPHER_CTX *ctx_enc;	/* encrypt */
++EVP_CIPHER_CTX *ctx_dec;	/* decrypt */
+ 
+-EVP_CIPHER_CTX ctx_enc_ecb;	/* sideband ecb encrypt */
+-EVP_CIPHER_CTX ctx_dec_ecb;	/* sideband ecb decrypt */
++EVP_CIPHER_CTX *ctx_enc_ecb;	/* sideband ecb encrypt */
++EVP_CIPHER_CTX *ctx_dec_ecb;	/* sideband ecb decrypt */
+ 
+ int prep_key(char **key, int size, struct vtun_host *host)
+ {
+    int tmplen, halflen;
+    char *hashkey;
+@@ -175,37 +175,37 @@
+       case VTUN_ENC_AES256CBC:
+          blocksize = 16;
+          keysize = 32;
+          sb_init = 1;
+          cipher_type = EVP_aes_256_ecb();
+-         pctx_enc = &ctx_enc_ecb;
+-         pctx_dec = &ctx_dec_ecb;
++         pctx_enc = ctx_enc_ecb;
++         pctx_dec = ctx_dec_ecb;
+       break;
+       
+       case VTUN_ENC_AES256ECB:
+          blocksize = 16;
+          keysize = 32;
+-         pctx_enc = &ctx_enc;
+-         pctx_dec = &ctx_dec;
++         pctx_enc = ctx_enc;
++         pctx_dec = ctx_dec;
+          cipher_type = EVP_aes_256_ecb();
+          strcpy(cipher_name,"AES-256-ECB");
+       break;      
+       case VTUN_ENC_AES128OFB:
+       case VTUN_ENC_AES128CFB:
+       case VTUN_ENC_AES128CBC:
+          blocksize = 16;
+          keysize = 16;
+          sb_init=1;
+          cipher_type = EVP_aes_128_ecb();
+-         pctx_enc = &ctx_enc_ecb;
+-         pctx_dec = &ctx_dec_ecb;
++         pctx_enc = ctx_enc_ecb;
++         pctx_dec = ctx_dec_ecb;
+       break;
+       case VTUN_ENC_AES128ECB:
+          blocksize = 16;
+          keysize = 16;
+-         pctx_enc = &ctx_enc;
+-         pctx_dec = &ctx_dec;
++         pctx_enc = ctx_enc;
++         pctx_dec = ctx_dec;
+          cipher_type = EVP_aes_128_ecb();
+          strcpy(cipher_name,"AES-128-ECB");
+       break;
+ 
+       case VTUN_ENC_BF256OFB:
+@@ -214,20 +214,20 @@
+          blocksize = 8;
+          keysize = 32;
+          var_key = 1;
+          sb_init = 1;
+          cipher_type = EVP_bf_ecb();
+-         pctx_enc = &ctx_enc_ecb;
+-         pctx_dec = &ctx_dec_ecb;
++         pctx_enc = ctx_enc_ecb;
++         pctx_dec = ctx_dec_ecb;
+       break;
+ 
+       case VTUN_ENC_BF256ECB:
+          blocksize = 8;
+          keysize = 32;
+          var_key = 1;
+-         pctx_enc = &ctx_enc;
+-         pctx_dec = &ctx_dec;
++         pctx_enc = ctx_enc;
++         pctx_dec = ctx_dec;
+          cipher_type = EVP_bf_ecb();
+          strcpy(cipher_name,"Blowfish-256-ECB");
+       break;
+ 
+       case VTUN_ENC_BF128OFB:
+@@ -236,26 +236,28 @@
+          blocksize = 8;
+          keysize = 16;
+          var_key = 1;
+          sb_init = 1;
+          cipher_type = EVP_bf_ecb();
+-         pctx_enc = &ctx_enc_ecb;
+-         pctx_dec = &ctx_dec_ecb;
++         pctx_enc = ctx_enc_ecb;
++         pctx_dec = ctx_dec_ecb;
+       break;
+       case VTUN_ENC_BF128ECB: /* blowfish 128 ecb is the default */
+       default:
+          blocksize = 8;
+          keysize = 16;
+          var_key = 1;
+-         pctx_enc = &ctx_enc;
+-         pctx_dec = &ctx_dec;
++         pctx_enc = ctx_enc;
++         pctx_dec = ctx_dec;
+          cipher_type = EVP_bf_ecb();
+          strcpy(cipher_name,"Blowfish-128-ECB");
+       break;
+    } /* switch(host->cipher) */
+ 
+    if (prep_key(&pkey, keysize, host) != 0) return -1;
++   pctx_enc = EVP_CIPHER_CTX_new();
++   pctx_dec = EVP_CIPHER_CTX_new();
+    EVP_CIPHER_CTX_init(pctx_enc);
+    EVP_CIPHER_CTX_init(pctx_dec);
+    EVP_EncryptInit_ex(pctx_enc, cipher_type, NULL, NULL, NULL);
+    EVP_DecryptInit_ex(pctx_dec, cipher_type, NULL, NULL, NULL);
+    if (var_key)
+@@ -287,14 +289,14 @@
+    free_key(pkey); pkey = NULL;
+ 
+    lfd_free(enc_buf); enc_buf = NULL;
+    lfd_free(dec_buf); dec_buf = NULL;
+ 
+-   EVP_CIPHER_CTX_cleanup(&ctx_enc);
+-   EVP_CIPHER_CTX_cleanup(&ctx_dec);
+-   EVP_CIPHER_CTX_cleanup(&ctx_enc_ecb);
+-   EVP_CIPHER_CTX_cleanup(&ctx_dec_ecb);
++   EVP_CIPHER_CTX_free(ctx_enc);
++   EVP_CIPHER_CTX_free(ctx_dec);
++   EVP_CIPHER_CTX_free(ctx_enc_ecb);
++   EVP_CIPHER_CTX_free(ctx_dec_ecb);
+ 
+    return 0;
+ }
+ 
+ int encrypt_buf(int len, char *in, char **out)
+@@ -316,11 +318,11 @@
+    
+    memset(in_ptr+len, pad, pad);
+    outlen=len+pad;
+    if (pad == blocksize)
+       RAND_bytes(in_ptr+len, blocksize-1);
+-   EVP_EncryptUpdate(&ctx_enc, out_ptr, &outlen, in_ptr, len+pad);
++   EVP_EncryptUpdate(ctx_enc, out_ptr, &outlen, in_ptr, len+pad);
+    *out = enc_buf;
+ 
+    sequence_num++;
+ 
+    return outlen+msg_len;
+@@ -336,11 +338,11 @@
+    in = *out;
+    in_ptr = in;
+ 
+    outlen=len;
+    if (!len) return 0;
+-   EVP_DecryptUpdate(&ctx_dec, out_ptr, &outlen, in_ptr, len);
++   EVP_DecryptUpdate(ctx_dec, out_ptr, &outlen, in_ptr, len);
+    recv_ib_mesg(&outlen, &out_ptr);
+    if (!outlen) return 0;
+    tmp_ptr = out_ptr + outlen; tmp_ptr--;
+    pad = *tmp_ptr;
+    if (pad < 1 || pad > blocksize) {
+@@ -424,17 +426,18 @@
+       /* if we're here, something weird's going on */
+          return -1;
+       break;
+    } /* switch(cipher) */
+ 
+-   EVP_CIPHER_CTX_init(&ctx_enc);
+-   EVP_EncryptInit_ex(&ctx_enc, cipher_type, NULL, NULL, NULL);
++   ctx_enc = EVP_CIPHER_CTX_new();
++   EVP_CIPHER_CTX_init(ctx_enc);
++   EVP_EncryptInit_ex(ctx_enc, cipher_type, NULL, NULL, NULL);
+    if (var_key)
+-      EVP_CIPHER_CTX_set_key_length(&ctx_enc, keysize);
+-   EVP_EncryptInit_ex(&ctx_enc, NULL, NULL, pkey, NULL);
+-   EVP_EncryptInit_ex(&ctx_enc, NULL, NULL, NULL, iv);
+-   EVP_CIPHER_CTX_set_padding(&ctx_enc, 0);
++      EVP_CIPHER_CTX_set_key_length(ctx_enc, keysize);
++   EVP_EncryptInit_ex(ctx_enc, NULL, NULL, pkey, NULL);
++   EVP_EncryptInit_ex(ctx_enc, NULL, NULL, NULL, iv);
++   EVP_CIPHER_CTX_set_padding(ctx_enc, 0);
+    if (enc_init_first_time)
+    {
+       sprintf(tmpstr,"%s encryption initialized", cipher_name);
+       vtun_syslog(LOG_INFO, tmpstr);
+       enc_init_first_time = 0;
+@@ -514,17 +517,18 @@
+       /* if we're here, something weird's going on */
+          return -1;
+       break;
+    } /* switch(cipher) */
+ 
+-   EVP_CIPHER_CTX_init(&ctx_dec);
+-   EVP_DecryptInit_ex(&ctx_dec, cipher_type, NULL, NULL, NULL);
++   ctx_dec = EVP_CIPHER_CTX_new();
++   EVP_CIPHER_CTX_init(ctx_dec);
++   EVP_DecryptInit_ex(ctx_dec, cipher_type, NULL, NULL, NULL);
+    if (var_key)
+-      EVP_CIPHER_CTX_set_key_length(&ctx_dec, keysize);
+-   EVP_DecryptInit_ex(&ctx_dec, NULL, NULL, pkey, NULL);
+-   EVP_DecryptInit_ex(&ctx_dec, NULL, NULL, NULL, iv);
+-   EVP_CIPHER_CTX_set_padding(&ctx_dec, 0);
++      EVP_CIPHER_CTX_set_key_length(ctx_dec, keysize);
++   EVP_DecryptInit_ex(ctx_dec, NULL, NULL, pkey, NULL);
++   EVP_DecryptInit_ex(ctx_dec, NULL, NULL, NULL, iv);
++   EVP_CIPHER_CTX_set_padding(ctx_dec, 0);
+    if (dec_init_first_time)
+    {
+       sprintf(tmpstr,"%s decryption initialized", cipher_name);
+       vtun_syslog(LOG_INFO, tmpstr);
+       dec_init_first_time = 0;
+@@ -552,11 +556,11 @@
+          memset(iv,0,blocksize); free(iv); iv = NULL;
+          RAND_bytes(in_ptr, in - in_ptr);
+ 
+          in_ptr = in - blocksize*2;
+          outlen = blocksize*2;
+-         EVP_EncryptUpdate(&ctx_enc_ecb, in_ptr, 
++         EVP_EncryptUpdate(ctx_enc_ecb, in_ptr, 
+             &outlen, in_ptr, blocksize*2);
+          *out = in_ptr;
+          len = outlen;
+          cipher_enc_state = CIPHER_SEQUENCE;
+       break;
+@@ -579,11 +583,11 @@
+    {
+       case CIPHER_INIT:
+          in_ptr = in;
+          iv = malloc(blocksize);
+          outlen = blocksize*2;
+-         EVP_DecryptUpdate(&ctx_dec_ecb, in_ptr, &outlen, in_ptr, blocksize*2);
++         EVP_DecryptUpdate(ctx_dec_ecb, in_ptr, &outlen, in_ptr, blocksize*2);
+          
+          if ( !strncmp(in_ptr, "ivec", 4) )
+          {
+             memcpy(iv, in_ptr+4, blocksize);
+             cipher_dec_init(iv);
+@@ -622,11 +626,11 @@
+                   "Max. gibberish threshold reached");
+ #endif
+                if (cipher_enc_state != CIPHER_INIT)
+                {
+                   cipher_enc_state = CIPHER_INIT;
+-                  EVP_CIPHER_CTX_cleanup(&ctx_enc);
++                  EVP_CIPHER_CTX_free(ctx_enc);
+ #ifdef LFD_ENCRYPT_DEBUG
+                   vtun_syslog(LOG_INFO, 
+                      "Forcing local encryptor re-init");
+ #endif
+                }
+@@ -703,11 +707,11 @@
+          *len -= blocksize;
+ 
+          if (cipher_enc_state != CIPHER_INIT)
+          {
+             cipher_enc_state = CIPHER_INIT;
+-            EVP_CIPHER_CTX_cleanup(&ctx_enc);
++            EVP_CIPHER_CTX_free(ctx_enc);
+          }
+ #ifdef LFD_ENCRYPT_DEBUG
+          vtun_syslog(LOG_INFO, "Remote requests encryptor re-init");
+ #endif
+       }
+@@ -717,11 +721,11 @@
+ 
+          if (cipher_dec_state != CIPHER_INIT &&
+              cipher_enc_state != CIPHER_REQ_INIT &&
+              cipher_enc_state != CIPHER_INIT)
+          {
+-            EVP_CIPHER_CTX_cleanup (&ctx_dec);
++            EVP_CIPHER_CTX_free (ctx_dec);
+             cipher_dec_state = CIPHER_INIT;
+             cipher_enc_state = CIPHER_REQ_INIT;
+          }
+ #ifdef LFD_ENCRYPT_DEBUG
+          vtun_syslog(LOG_INFO, "Local decryptor out of sync");
Index: openwrt/feeds/arednpackages/net/vtun/patches/103-vtun.patch
===================================================================
--- /dev/null
+++ openwrt/feeds/arednpackages/net/vtun/patches/103-vtun.patch
@@ -0,0 +1,2110 @@
+diff -NarU5 a/auth.c b/auth.c
+--- a/auth.c	2009-05-15 02:23:39.000000000 -0500
++++ b/auth.c	2020-02-09 14:17:12.691203999 -0600
+@@ -54,20 +54,28 @@
+ #include "lib.h"
+ #include "lock.h"
+ #include "auth.h"
+ 
+ /* Encryption and Decryption of the challenge key */
+-#ifdef HAVE_SSL
+ 
+-#include <openssl/md5.h>
+-#include <openssl/blowfish.h>
+-#include <openssl/rand.h>
++#include "md5.h"
++#include "blowfish.h"
+ 
+-void gen_chal(char *buf)
++ void gen_chal(char *buf)
++{
++   register int i;
++ 
++   srand(time(NULL));
++
++   for(i=0; i < VTUN_CHAL_SIZE; i++)
++      buf[i] = (unsigned int)(255.0 * rand()/RAND_MAX);
++} 
++
++/* void gen_chal(char *buf)
+ {
+    RAND_bytes(buf, VTUN_CHAL_SIZE);
+-}
++} */
+ 
+ void encrypt_chal(char *chal, char *pwd)
+ { 
+    register int i;
+    BF_KEY key;
+@@ -87,37 +95,10 @@
+ 
+    for(i=0; i < VTUN_CHAL_SIZE; i += 8 )
+       BF_ecb_encrypt(chal + i,  chal + i, &key, BF_DECRYPT);
+ }
+ 
+-#else /* HAVE_SSL */
+-
+-void encrypt_chal(char *chal, char *pwd)
+-{ 
+-   char * xor_msk = pwd;
+-   register int i, xor_len = strlen(xor_msk);
+-
+-   for(i=0; i < VTUN_CHAL_SIZE; i++)
+-      chal[i] ^= xor_msk[i%xor_len];
+-}
+-
+-void inline decrypt_chal(char *chal, char *pwd)
+-{ 
+-   encrypt_chal(chal, pwd);
+-}
+-
+-/* Generate PSEUDO random challenge key. */
+-void gen_chal(char *buf)
+-{
+-   register int i;
+- 
+-   srand(time(NULL));
+-
+-   for(i=0; i < VTUN_CHAL_SIZE; i++)
+-      buf[i] = (unsigned int)(255.0 * rand()/RAND_MAX);
+-}
+-#endif /* HAVE_SSL */
+ 
+ /* 
+  * Functions to convert binary flags to character string.
+  * string format:  <CS64> 
+  * C - compression, S - speed for shaper and so on.
+diff -NarU5 a/bf_cbc.c b/bf_cbc.c
+--- a/bf_cbc.c	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_cbc.c	2020-02-09 14:17:26.542126000 -0600
+@@ -0,0 +1,148 @@
++/*	$NetBSD: bf_cbc.c,v 1.12 2005/12/11 12:20:48 christos Exp $	*/
++ 
++/* crypto/bf/bf_cbc.c */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++#include <sys/cdefs.h>
++ 
++#include <sys/types.h>
++ 
++#include "blowfish.h"
++#include "bf_locl.h"
++ 
++void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
++	     const BF_KEY *schedule, unsigned char *ivec, int encrypt)
++	{
++	register BF_LONG tin0,tin1;
++	register BF_LONG tout0,tout1,xor0,xor1;
++	register long l=length;
++	BF_LONG tin[2];
++ 
++	if (encrypt)
++		{
++		n2l(ivec,tout0);
++		n2l(ivec,tout1);
++		ivec-=8;
++		for (l-=8; l>=0; l-=8)
++			{
++			n2l(in,tin0);
++			n2l(in,tin1);
++			tin0^=tout0;
++			tin1^=tout1;
++			tin[0]=tin0;
++			tin[1]=tin1;
++			BF_encrypt(tin,(const BF_KEY *)schedule);
++			tout0=tin[0];
++			tout1=tin[1];
++			l2n(tout0,out);
++			l2n(tout1,out);
++			}
++		if (l != -8)
++			{
++			n2ln(in,tin0,tin1,l+8);
++			tin0^=tout0;
++			tin1^=tout1;
++			tin[0]=tin0;
++			tin[1]=tin1;
++			BF_encrypt(tin,(const BF_KEY *)schedule);
++			tout0=tin[0];
++			tout1=tin[1];
++			l2n(tout0,out);
++			l2n(tout1,out);
++			}
++		l2n(tout0,ivec);
++		l2n(tout1,ivec);
++		}
++	else
++		{
++		n2l(ivec,xor0);
++		n2l(ivec,xor1);
++		ivec-=8;
++		for (l-=8; l>=0; l-=8)
++			{
++			n2l(in,tin0);
++			n2l(in,tin1);
++			tin[0]=tin0;
++			tin[1]=tin1;
++			BF_decrypt(tin,(const BF_KEY *)schedule);
++			tout0=tin[0]^xor0;
++			tout1=tin[1]^xor1;
++			l2n(tout0,out);
++			l2n(tout1,out);
++			xor0=tin0;
++			xor1=tin1;
++			}
++		if (l != -8)
++			{
++			n2l(in,tin0);
++			n2l(in,tin1);
++			tin[0]=tin0;
++			tin[1]=tin1;
++			BF_decrypt(tin,(const BF_KEY *)schedule);
++			tout0=tin[0]^xor0;
++			tout1=tin[1]^xor1;
++			l2nn(tout0,tout1,out,l+8);
++			xor0=tin0;
++			xor1=tin1;
++			}
++		l2n(xor0,ivec);
++		l2n(xor1,ivec);
++		}
++	tin0=tin1=tout0=tout1=xor0=xor1=0;
++	tin[0]=tin[1]=0;
++	}
+diff -NarU5 a/bf_ecb.c b/bf_ecb.c
+--- a/bf_ecb.c	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_ecb.c	2020-02-09 14:17:26.566138000 -0600
+@@ -0,0 +1,88 @@
++/*	$NetBSD: bf_ecb.c,v 1.3 2005/12/11 12:20:48 christos Exp $	*/
++ 
++/* crypto/bf/bf_ecb.c */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++#include <sys/cdefs.h>
++ 
++#include <sys/types.h>
++ 
++#include "blowfish.h"
++#include "bf_locl.h"
++ 
++/* Blowfish as implemented from 'Blowfish: Springer-Verlag paper'
++ * (From LECTURE NOTES IN COMPUTER SCIENCE 809, FAST SOFTWARE ENCRYPTION,
++ * CAMBRIDGE SECURITY WORKSHOP, CAMBRIDGE, U.K., DECEMBER 9-11, 1993)
++ */
++ 
++void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
++	     const BF_KEY *key, int encrypt)
++	{
++	BF_LONG l,d[2];
++ 
++	n2l(in,l); d[0]=l;
++	n2l(in,l); d[1]=l;
++	if (encrypt)
++		BF_encrypt(d,key);
++	else
++		BF_decrypt(d,key);
++	l=d[0]; l2n(l,out);
++	l=d[1]; l2n(l,out);
++	l=d[0]=d[1]=0;
++	}
++ 
+diff -NarU5 a/bf_enc.c b/bf_enc.c
+--- a/bf_enc.c	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_enc.c	2020-02-09 14:17:26.602156000 -0600
+@@ -0,0 +1,157 @@
++/*	$NetBSD: bf_enc.c,v 1.10 2005/12/11 12:20:48 christos Exp $	*/
++ 
++/* crypto/bf/bf_enc.c */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++#include <sys/cdefs.h>
++ 
++#include <sys/types.h>
++#include "blowfish.h"
++#include "bf_locl.h"
++ 
++/* Blowfish as implemented from 'Blowfish: Springer-Verlag paper'
++ * (From LECTURE NOTES IN COIMPUTER SCIENCE 809, FAST SOFTWARE ENCRYPTION,
++ * CAMBRIDGE SECURITY WORKSHOP, CAMBRIDGE, U.K., DECEMBER 9-11, 1993)
++ */
++ 
++#if (BF_ROUNDS != 16) && (BF_ROUNDS != 20)
++If you set BF_ROUNDS to some value other than 16 or 20, you will have
++to modify the code.
++#endif
++ 
++/* XXX "data" is host endian */
++void
++BF_encrypt(BF_LONG *data, const BF_KEY *key)
++{
++	BF_LONG l, r;
++	const BF_LONG *p, *s;
++ 
++	p = key->P;
++	s= &key->S[0];
++	l = data[0];
++	r = data[1];
++ 
++	l^=p[0];
++	BF_ENC(r, l, s, p[ 1]);
++	BF_ENC(l, r, s, p[ 2]);
++	BF_ENC(r, l, s, p[ 3]);
++	BF_ENC(l, r, s, p[ 4]);
++	BF_ENC(r, l, s, p[ 5]);
++	BF_ENC(l, r, s, p[ 6]);
++	BF_ENC(r, l, s, p[ 7]);
++	BF_ENC(l, r, s, p[ 8]);
++	BF_ENC(r, l, s, p[ 9]);
++	BF_ENC(l, r, s, p[10]);
++	BF_ENC(r, l, s, p[11]);
++	BF_ENC(l, r, s, p[12]);
++	BF_ENC(r, l, s, p[13]);
++	BF_ENC(l, r, s, p[14]);
++	BF_ENC(r, l, s, p[15]);
++	BF_ENC(l, r, s, p[16]);
++#if BF_ROUNDS == 20
++	BF_ENC(r, l, s, p[17]);
++	BF_ENC(l, r, s, p[18]);
++	BF_ENC(r, l, s, p[19]);
++	BF_ENC(l, r, s, p[20]);
++#endif
++	r ^= p[BF_ROUNDS + 1];
++ 
++	data[1] = l & 0xffffffff;
++	data[0] = r & 0xffffffff;
++}
++ 
++/* XXX "data" is host endian */
++void
++BF_decrypt(BF_LONG *data, const BF_KEY *key)
++{
++	BF_LONG l, r;
++	const BF_LONG *p, *s;
++ 
++	p = key->P;
++	s= &key->S[0];
++	l = data[0];
++	r = data[1];
++ 
++	l ^= p[BF_ROUNDS + 1];
++#if BF_ROUNDS == 20
++	BF_ENC(r, l, s, p[20]);
++	BF_ENC(l, r, s, p[19]);
++	BF_ENC(r, l, s, p[18]);
++	BF_ENC(l, r, s, p[17]);
++#endif
++	BF_ENC(r, l, s, p[16]);
++	BF_ENC(l, r, s, p[15]);
++	BF_ENC(r, l, s, p[14]);
++	BF_ENC(l, r, s, p[13]);
++	BF_ENC(r, l, s, p[12]);
++	BF_ENC(l, r, s, p[11]);
++	BF_ENC(r, l, s, p[10]);
++	BF_ENC(l, r, s, p[ 9]);
++	BF_ENC(r, l, s, p[ 8]);
++	BF_ENC(l, r, s, p[ 7]);
++	BF_ENC(r, l, s, p[ 6]);
++	BF_ENC(l, r, s, p[ 5]);
++	BF_ENC(r, l, s, p[ 4]);
++	BF_ENC(l, r, s, p[ 3]);
++	BF_ENC(r, l, s, p[ 2]);
++	BF_ENC(l, r, s, p[ 1]);
++	r ^= p[0];
++ 
++	data[1] = l & 0xffffffff;
++	data[0] = r & 0xffffffff;
++}
+diff -NarU5 a/bf_locl.h b/bf_locl.h
+--- a/bf_locl.h	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_locl.h	2020-02-09 14:17:30.684196000 -0600
+@@ -0,0 +1,224 @@
++/*	$NetBSD: bf_locl.h,v 1.5 2009/06/30 13:14:40 pooka Exp $	*/
++/*	$KAME: bf_locl.h,v 1.5 2000/08/31 06:03:48 itojun Exp $	*/
++ 
++/* crypto/bf/bf_local.h */
++/* Copyright (C) 1995-1997 Eric Young (eay@mincom.oz.au)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@mincom.oz.au).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@mincom.oz.au).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@mincom.oz.au)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@mincom.oz.au)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++/* WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
++ *
++ * Always modify bf_locl.org since bf_locl.h is automatically generated from
++ * it during SSLeay configuration.
++ *
++ * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
++ */
++ 
++#undef c2l
++#define c2l(c,l)	(l =((BF_LONG)(*((c)++)))    , \
++			 l|=((BF_LONG)(*((c)++)))<< 8L, \
++			 l|=((BF_LONG)(*((c)++)))<<16L, \
++			 l|=((BF_LONG)(*((c)++)))<<24L)
++ 
++/* NOTE - c is not incremented as per c2l */
++#undef c2ln
++#define c2ln(c,l1,l2,n)	{ \
++			c+=n; \
++			l1=l2=0; \
++			switch (n) { \
++			case 8: l2 =((BF_LONG)(*(--(c))))<<24L; \
++			case 7: l2|=((BF_LONG)(*(--(c))))<<16L; \
++			case 6: l2|=((BF_LONG)(*(--(c))))<< 8L; \
++			case 5: l2|=((BF_LONG)(*(--(c))));     \
++			case 4: l1 =((BF_LONG)(*(--(c))))<<24L; \
++			case 3: l1|=((BF_LONG)(*(--(c))))<<16L; \
++			case 2: l1|=((BF_LONG)(*(--(c))))<< 8L; \
++			case 1: l1|=((BF_LONG)(*(--(c))));     \
++				} \
++			}
++ 
++#undef l2c
++#define l2c(l,c)	(*((c)++)=(unsigned char)(((l)     )&0xff), \
++			 *((c)++)=(unsigned char)(((l)>> 8L)&0xff), \
++			 *((c)++)=(unsigned char)(((l)>>16L)&0xff), \
++			 *((c)++)=(unsigned char)(((l)>>24L)&0xff))
++ 
++/* NOTE - c is not incremented as per l2c */
++#undef l2cn
++#define l2cn(l1,l2,c,n)	{ \
++			c+=n; \
++			switch (n) { \
++			case 8: *(--(c))=(unsigned char)(((l2)>>24L)&0xff); \
++			case 7: *(--(c))=(unsigned char)(((l2)>>16L)&0xff); \
++			case 6: *(--(c))=(unsigned char)(((l2)>> 8L)&0xff); \
++			case 5: *(--(c))=(unsigned char)(((l2)     )&0xff); \
++			case 4: *(--(c))=(unsigned char)(((l1)>>24L)&0xff); \
++			case 3: *(--(c))=(unsigned char)(((l1)>>16L)&0xff); \
++			case 2: *(--(c))=(unsigned char)(((l1)>> 8L)&0xff); \
++			case 1: *(--(c))=(unsigned char)(((l1)     )&0xff); \
++				} \
++			}
++ 
++/* NOTE - c is not incremented as per n2l */
++#define n2ln(c,l1,l2,n)	{ \
++			c+=n; \
++			l1=l2=0; \
++			switch (n) { \
++			case 8: l2 =((BF_LONG)(*(--(c))))    ; \
++			case 7: l2|=((BF_LONG)(*(--(c))))<< 8; \
++			case 6: l2|=((BF_LONG)(*(--(c))))<<16; \
++			case 5: l2|=((BF_LONG)(*(--(c))))<<24; \
++			case 4: l1 =((BF_LONG)(*(--(c))))    ; \
++			case 3: l1|=((BF_LONG)(*(--(c))))<< 8; \
++			case 2: l1|=((BF_LONG)(*(--(c))))<<16; \
++			case 1: l1|=((BF_LONG)(*(--(c))))<<24; \
++				} \
++			}
++ 
++/* NOTE - c is not incremented as per l2n */
++#define l2nn(l1,l2,c,n)	{ \
++			c+=n; \
++			switch (n) { \
++			case 8: *(--(c))=(unsigned char)(((l2)    )&0xff); \
++			case 7: *(--(c))=(unsigned char)(((l2)>> 8)&0xff); \
++			case 6: *(--(c))=(unsigned char)(((l2)>>16)&0xff); \
++			case 5: *(--(c))=(unsigned char)(((l2)>>24)&0xff); \
++			case 4: *(--(c))=(unsigned char)(((l1)    )&0xff); \
++			case 3: *(--(c))=(unsigned char)(((l1)>> 8)&0xff); \
++			case 2: *(--(c))=(unsigned char)(((l1)>>16)&0xff); \
++			case 1: *(--(c))=(unsigned char)(((l1)>>24)&0xff); \
++				} \
++			}
++ 
++#undef n2l
++#define n2l(c,l)        (l =((BF_LONG)(*((c)++)))<<24L, \
++                         l|=((BF_LONG)(*((c)++)))<<16L, \
++                         l|=((BF_LONG)(*((c)++)))<< 8L, \
++                         l|=((BF_LONG)(*((c)++))))
++ 
++#undef l2n
++#define l2n(l,c)        (*((c)++)=(unsigned char)(((l)>>24L)&0xff), \
++                         *((c)++)=(unsigned char)(((l)>>16L)&0xff), \
++                         *((c)++)=(unsigned char)(((l)>> 8L)&0xff), \
++                         *((c)++)=(unsigned char)(((l)     )&0xff))
++ 
++/* This is actually a big endian algorithm, the most significate byte
++ * is used to lookup array 0 */
++ 
++/* use BF_PTR2 for intel boxes,
++ * BF_PTR for sparc and MIPS/SGI
++ * use nothing for Alpha and HP.
++ */
++#undef	BF_PTR
++#undef	BF_PTR2
++#ifdef __i386__
++#define	BF_PTR2
++#else
++#ifdef __mips__
++#define	BF_PTR
++#endif
++#endif
++ 
++#define BF_M	0x3fc
++#define BF_0	22L
++#define BF_1	14L
++#define BF_2	 6L
++#define BF_3	 2L /* left shift */
++ 
++#if defined(BF_PTR2)
++ 
++/* This is basically a special pentium verson */
++#define BF_ENC(LL,R,S,P) \
++	{ \
++	BF_LONG t,u,v; \
++	u=R>>BF_0; \
++	v=R>>BF_1; \
++	u&=BF_M; \
++	v&=BF_M; \
++	t=  *(const BF_LONG *)((const unsigned char *)&(S[  0])+u); \
++	u=R>>BF_2; \
++	t+= *(const BF_LONG *)((const unsigned char *)&(S[256])+v); \
++	v=R<<BF_3; \
++	u&=BF_M; \
++	v&=BF_M; \
++	t^= *(const BF_LONG *)((const unsigned char *)&(S[512])+u); \
++	LL^=P; \
++	t+= *(const BF_LONG *)((const unsigned char *)&(S[768])+v); \
++	LL^=t; \
++	}
++ 
++#elif defined(BF_PTR)
++ 
++/* This is normally very good */
++ 
++#define BF_ENC(LL,R,S,P) \
++	LL^=P; \
++	LL^= (((*(const BF_LONG *)((const unsigned char *)&(S[  0])+((R>>BF_0)&BF_M))+ \
++		*(const BF_LONG *)((const unsigned char *)&(S[256])+((R>>BF_1)&BF_M)))^ \
++		*(const BF_LONG *)((const unsigned char *)&(S[512])+((R>>BF_2)&BF_M)))+ \
++		*(const BF_LONG *)((const unsigned char *)&(S[768])+((R<<BF_3)&BF_M)));
++#else
++ 
++/* This will always work, even on 64 bit machines and strangly enough,
++ * on the Alpha it is faster than the pointer versions (both 32 and 64
++ * versions of BF_LONG) */
++ 
++#define BF_ENC(LL,R,S,P) \
++	LL^=P; \
++	LL^=(((	S[        (R>>24L)      ] + \
++		S[0x0100+((R>>16L)&0xff)])^ \
++		S[0x0200+((R>> 8L)&0xff)])+ \
++		S[0x0300+((R     )&0xff)])&0xffffffff;
++#endif
+diff -NarU5 a/bf_pi.h b/bf_pi.h
+--- a/bf_pi.h	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_pi.h	2020-02-09 14:17:30.700203999 -0600
+@@ -0,0 +1,327 @@
++/*	$NetBSD: bf_pi.h,v 1.2 2001/02/21 21:39:53 jdolecek Exp $	*/
++/*	$KAME: bf_pi.h,v 1.3 2000/03/27 04:36:26 sumikawa Exp $	*/
++ 
++/* crypto/bf/bf_pi.h */
++/* Copyright (C) 1995-1997 Eric Young (eay@mincom.oz.au)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@mincom.oz.au).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@mincom.oz.au).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@mincom.oz.au)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@mincom.oz.au)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++static const BF_KEY bf_init= {
++	{
++	0x243f6a88L, 0x85a308d3L, 0x13198a2eL, 0x03707344L,
++	0xa4093822L, 0x299f31d0L, 0x082efa98L, 0xec4e6c89L,
++	0x452821e6L, 0x38d01377L, 0xbe5466cfL, 0x34e90c6cL,
++	0xc0ac29b7L, 0xc97c50ddL, 0x3f84d5b5L, 0xb5470917L,
++	0x9216d5d9L, 0x8979fb1b
++	},{
++	0xd1310ba6L, 0x98dfb5acL, 0x2ffd72dbL, 0xd01adfb7L,
++	0xb8e1afedL, 0x6a267e96L, 0xba7c9045L, 0xf12c7f99L,
++	0x24a19947L, 0xb3916cf7L, 0x0801f2e2L, 0x858efc16L,
++	0x636920d8L, 0x71574e69L, 0xa458fea3L, 0xf4933d7eL,
++	0x0d95748fL, 0x728eb658L, 0x718bcd58L, 0x82154aeeL,
++	0x7b54a41dL, 0xc25a59b5L, 0x9c30d539L, 0x2af26013L,
++	0xc5d1b023L, 0x286085f0L, 0xca417918L, 0xb8db38efL,
++	0x8e79dcb0L, 0x603a180eL, 0x6c9e0e8bL, 0xb01e8a3eL,
++	0xd71577c1L, 0xbd314b27L, 0x78af2fdaL, 0x55605c60L,
++	0xe65525f3L, 0xaa55ab94L, 0x57489862L, 0x63e81440L,
++	0x55ca396aL, 0x2aab10b6L, 0xb4cc5c34L, 0x1141e8ceL,
++	0xa15486afL, 0x7c72e993L, 0xb3ee1411L, 0x636fbc2aL,
++	0x2ba9c55dL, 0x741831f6L, 0xce5c3e16L, 0x9b87931eL,
++	0xafd6ba33L, 0x6c24cf5cL, 0x7a325381L, 0x28958677L,
++	0x3b8f4898L, 0x6b4bb9afL, 0xc4bfe81bL, 0x66282193L,
++	0x61d809ccL, 0xfb21a991L, 0x487cac60L, 0x5dec8032L,
++	0xef845d5dL, 0xe98575b1L, 0xdc262302L, 0xeb651b88L,
++	0x23893e81L, 0xd396acc5L, 0x0f6d6ff3L, 0x83f44239L,
++	0x2e0b4482L, 0xa4842004L, 0x69c8f04aL, 0x9e1f9b5eL,
++	0x21c66842L, 0xf6e96c9aL, 0x670c9c61L, 0xabd388f0L,
++	0x6a51a0d2L, 0xd8542f68L, 0x960fa728L, 0xab5133a3L,
++	0x6eef0b6cL, 0x137a3be4L, 0xba3bf050L, 0x7efb2a98L,
++	0xa1f1651dL, 0x39af0176L, 0x66ca593eL, 0x82430e88L,
++	0x8cee8619L, 0x456f9fb4L, 0x7d84a5c3L, 0x3b8b5ebeL,
++	0xe06f75d8L, 0x85c12073L, 0x401a449fL, 0x56c16aa6L,
++	0x4ed3aa62L, 0x363f7706L, 0x1bfedf72L, 0x429b023dL,
++	0x37d0d724L, 0xd00a1248L, 0xdb0fead3L, 0x49f1c09bL,
++	0x075372c9L, 0x80991b7bL, 0x25d479d8L, 0xf6e8def7L,
++	0xe3fe501aL, 0xb6794c3bL, 0x976ce0bdL, 0x04c006baL,
++	0xc1a94fb6L, 0x409f60c4L, 0x5e5c9ec2L, 0x196a2463L,
++	0x68fb6fafL, 0x3e6c53b5L, 0x1339b2ebL, 0x3b52ec6fL,
++	0x6dfc511fL, 0x9b30952cL, 0xcc814544L, 0xaf5ebd09L,
++	0xbee3d004L, 0xde334afdL, 0x660f2807L, 0x192e4bb3L,
++	0xc0cba857L, 0x45c8740fL, 0xd20b5f39L, 0xb9d3fbdbL,
++	0x5579c0bdL, 0x1a60320aL, 0xd6a100c6L, 0x402c7279L,
++	0x679f25feL, 0xfb1fa3ccL, 0x8ea5e9f8L, 0xdb3222f8L,
++	0x3c7516dfL, 0xfd616b15L, 0x2f501ec8L, 0xad0552abL,
++	0x323db5faL, 0xfd238760L, 0x53317b48L, 0x3e00df82L,
++	0x9e5c57bbL, 0xca6f8ca0L, 0x1a87562eL, 0xdf1769dbL,
++	0xd542a8f6L, 0x287effc3L, 0xac6732c6L, 0x8c4f5573L,
++	0x695b27b0L, 0xbbca58c8L, 0xe1ffa35dL, 0xb8f011a0L,
++	0x10fa3d98L, 0xfd2183b8L, 0x4afcb56cL, 0x2dd1d35bL,
++	0x9a53e479L, 0xb6f84565L, 0xd28e49bcL, 0x4bfb9790L,
++	0xe1ddf2daL, 0xa4cb7e33L, 0x62fb1341L, 0xcee4c6e8L,
++	0xef20cadaL, 0x36774c01L, 0xd07e9efeL, 0x2bf11fb4L,
++	0x95dbda4dL, 0xae909198L, 0xeaad8e71L, 0x6b93d5a0L,
++	0xd08ed1d0L, 0xafc725e0L, 0x8e3c5b2fL, 0x8e7594b7L,
++	0x8ff6e2fbL, 0xf2122b64L, 0x8888b812L, 0x900df01cL,
++	0x4fad5ea0L, 0x688fc31cL, 0xd1cff191L, 0xb3a8c1adL,
++	0x2f2f2218L, 0xbe0e1777L, 0xea752dfeL, 0x8b021fa1L,
++	0xe5a0cc0fL, 0xb56f74e8L, 0x18acf3d6L, 0xce89e299L,
++	0xb4a84fe0L, 0xfd13e0b7L, 0x7cc43b81L, 0xd2ada8d9L,
++	0x165fa266L, 0x80957705L, 0x93cc7314L, 0x211a1477L,
++	0xe6ad2065L, 0x77b5fa86L, 0xc75442f5L, 0xfb9d35cfL,
++	0xebcdaf0cL, 0x7b3e89a0L, 0xd6411bd3L, 0xae1e7e49L,
++	0x00250e2dL, 0x2071b35eL, 0x226800bbL, 0x57b8e0afL,
++	0x2464369bL, 0xf009b91eL, 0x5563911dL, 0x59dfa6aaL,
++	0x78c14389L, 0xd95a537fL, 0x207d5ba2L, 0x02e5b9c5L,
++	0x83260376L, 0x6295cfa9L, 0x11c81968L, 0x4e734a41L,
++	0xb3472dcaL, 0x7b14a94aL, 0x1b510052L, 0x9a532915L,
++	0xd60f573fL, 0xbc9bc6e4L, 0x2b60a476L, 0x81e67400L,
++	0x08ba6fb5L, 0x571be91fL, 0xf296ec6bL, 0x2a0dd915L,
++	0xb6636521L, 0xe7b9f9b6L, 0xff34052eL, 0xc5855664L,
++	0x53b02d5dL, 0xa99f8fa1L, 0x08ba4799L, 0x6e85076aL,
++	0x4b7a70e9L, 0xb5b32944L, 0xdb75092eL, 0xc4192623L,
++	0xad6ea6b0L, 0x49a7df7dL, 0x9cee60b8L, 0x8fedb266L,
++	0xecaa8c71L, 0x699a17ffL, 0x5664526cL, 0xc2b19ee1L,
++	0x193602a5L, 0x75094c29L, 0xa0591340L, 0xe4183a3eL,
++	0x3f54989aL, 0x5b429d65L, 0x6b8fe4d6L, 0x99f73fd6L,
++	0xa1d29c07L, 0xefe830f5L, 0x4d2d38e6L, 0xf0255dc1L,
++	0x4cdd2086L, 0x8470eb26L, 0x6382e9c6L, 0x021ecc5eL,
++	0x09686b3fL, 0x3ebaefc9L, 0x3c971814L, 0x6b6a70a1L,
++	0x687f3584L, 0x52a0e286L, 0xb79c5305L, 0xaa500737L,
++	0x3e07841cL, 0x7fdeae5cL, 0x8e7d44ecL, 0x5716f2b8L,
++	0xb03ada37L, 0xf0500c0dL, 0xf01c1f04L, 0x0200b3ffL,
++	0xae0cf51aL, 0x3cb574b2L, 0x25837a58L, 0xdc0921bdL,
++	0xd19113f9L, 0x7ca92ff6L, 0x94324773L, 0x22f54701L,
++	0x3ae5e581L, 0x37c2dadcL, 0xc8b57634L, 0x9af3dda7L,
++	0xa9446146L, 0x0fd0030eL, 0xecc8c73eL, 0xa4751e41L,
++	0xe238cd99L, 0x3bea0e2fL, 0x3280bba1L, 0x183eb331L,
++	0x4e548b38L, 0x4f6db908L, 0x6f420d03L, 0xf60a04bfL,
++	0x2cb81290L, 0x24977c79L, 0x5679b072L, 0xbcaf89afL,
++	0xde9a771fL, 0xd9930810L, 0xb38bae12L, 0xdccf3f2eL,
++	0x5512721fL, 0x2e6b7124L, 0x501adde6L, 0x9f84cd87L,
++	0x7a584718L, 0x7408da17L, 0xbc9f9abcL, 0xe94b7d8cL,
++	0xec7aec3aL, 0xdb851dfaL, 0x63094366L, 0xc464c3d2L,
++	0xef1c1847L, 0x3215d908L, 0xdd433b37L, 0x24c2ba16L,
++	0x12a14d43L, 0x2a65c451L, 0x50940002L, 0x133ae4ddL,
++	0x71dff89eL, 0x10314e55L, 0x81ac77d6L, 0x5f11199bL,
++	0x043556f1L, 0xd7a3c76bL, 0x3c11183bL, 0x5924a509L,
++	0xf28fe6edL, 0x97f1fbfaL, 0x9ebabf2cL, 0x1e153c6eL,
++	0x86e34570L, 0xeae96fb1L, 0x860e5e0aL, 0x5a3e2ab3L,
++	0x771fe71cL, 0x4e3d06faL, 0x2965dcb9L, 0x99e71d0fL,
++	0x803e89d6L, 0x5266c825L, 0x2e4cc978L, 0x9c10b36aL,
++	0xc6150ebaL, 0x94e2ea78L, 0xa5fc3c53L, 0x1e0a2df4L,
++	0xf2f74ea7L, 0x361d2b3dL, 0x1939260fL, 0x19c27960L,
++	0x5223a708L, 0xf71312b6L, 0xebadfe6eL, 0xeac31f66L,
++	0xe3bc4595L, 0xa67bc883L, 0xb17f37d1L, 0x018cff28L,
++	0xc332ddefL, 0xbe6c5aa5L, 0x65582185L, 0x68ab9802L,
++	0xeecea50fL, 0xdb2f953bL, 0x2aef7dadL, 0x5b6e2f84L,
++	0x1521b628L, 0x29076170L, 0xecdd4775L, 0x619f1510L,
++	0x13cca830L, 0xeb61bd96L, 0x0334fe1eL, 0xaa0363cfL,
++	0xb5735c90L, 0x4c70a239L, 0xd59e9e0bL, 0xcbaade14L,
++	0xeecc86bcL, 0x60622ca7L, 0x9cab5cabL, 0xb2f3846eL,
++	0x648b1eafL, 0x19bdf0caL, 0xa02369b9L, 0x655abb50L,
++	0x40685a32L, 0x3c2ab4b3L, 0x319ee9d5L, 0xc021b8f7L,
++	0x9b540b19L, 0x875fa099L, 0x95f7997eL, 0x623d7da8L,
++	0xf837889aL, 0x97e32d77L, 0x11ed935fL, 0x16681281L,
++	0x0e358829L, 0xc7e61fd6L, 0x96dedfa1L, 0x7858ba99L,
++	0x57f584a5L, 0x1b227263L, 0x9b83c3ffL, 0x1ac24696L,
++	0xcdb30aebL, 0x532e3054L, 0x8fd948e4L, 0x6dbc3128L,
++	0x58ebf2efL, 0x34c6ffeaL, 0xfe28ed61L, 0xee7c3c73L,
++	0x5d4a14d9L, 0xe864b7e3L, 0x42105d14L, 0x203e13e0L,
++	0x45eee2b6L, 0xa3aaabeaL, 0xdb6c4f15L, 0xfacb4fd0L,
++	0xc742f442L, 0xef6abbb5L, 0x654f3b1dL, 0x41cd2105L,
++	0xd81e799eL, 0x86854dc7L, 0xe44b476aL, 0x3d816250L,
++	0xcf62a1f2L, 0x5b8d2646L, 0xfc8883a0L, 0xc1c7b6a3L,
++	0x7f1524c3L, 0x69cb7492L, 0x47848a0bL, 0x5692b285L,
++	0x095bbf00L, 0xad19489dL, 0x1462b174L, 0x23820e00L,
++	0x58428d2aL, 0x0c55f5eaL, 0x1dadf43eL, 0x233f7061L,
++	0x3372f092L, 0x8d937e41L, 0xd65fecf1L, 0x6c223bdbL,
++	0x7cde3759L, 0xcbee7460L, 0x4085f2a7L, 0xce77326eL,
++	0xa6078084L, 0x19f8509eL, 0xe8efd855L, 0x61d99735L,
++	0xa969a7aaL, 0xc50c06c2L, 0x5a04abfcL, 0x800bcadcL,
++	0x9e447a2eL, 0xc3453484L, 0xfdd56705L, 0x0e1e9ec9L,
++	0xdb73dbd3L, 0x105588cdL, 0x675fda79L, 0xe3674340L,
++	0xc5c43465L, 0x713e38d8L, 0x3d28f89eL, 0xf16dff20L,
++	0x153e21e7L, 0x8fb03d4aL, 0xe6e39f2bL, 0xdb83adf7L,
++	0xe93d5a68L, 0x948140f7L, 0xf64c261cL, 0x94692934L,
++	0x411520f7L, 0x7602d4f7L, 0xbcf46b2eL, 0xd4a20068L,
++	0xd4082471L, 0x3320f46aL, 0x43b7d4b7L, 0x500061afL,
++	0x1e39f62eL, 0x97244546L, 0x14214f74L, 0xbf8b8840L,
++	0x4d95fc1dL, 0x96b591afL, 0x70f4ddd3L, 0x66a02f45L,
++	0xbfbc09ecL, 0x03bd9785L, 0x7fac6dd0L, 0x31cb8504L,
++	0x96eb27b3L, 0x55fd3941L, 0xda2547e6L, 0xabca0a9aL,
++	0x28507825L, 0x530429f4L, 0x0a2c86daL, 0xe9b66dfbL,
++	0x68dc1462L, 0xd7486900L, 0x680ec0a4L, 0x27a18deeL,
++	0x4f3ffea2L, 0xe887ad8cL, 0xb58ce006L, 0x7af4d6b6L,
++	0xaace1e7cL, 0xd3375fecL, 0xce78a399L, 0x406b2a42L,
++	0x20fe9e35L, 0xd9f385b9L, 0xee39d7abL, 0x3b124e8bL,
++	0x1dc9faf7L, 0x4b6d1856L, 0x26a36631L, 0xeae397b2L,
++	0x3a6efa74L, 0xdd5b4332L, 0x6841e7f7L, 0xca7820fbL,
++	0xfb0af54eL, 0xd8feb397L, 0x454056acL, 0xba489527L,
++	0x55533a3aL, 0x20838d87L, 0xfe6ba9b7L, 0xd096954bL,
++	0x55a867bcL, 0xa1159a58L, 0xcca92963L, 0x99e1db33L,
++	0xa62a4a56L, 0x3f3125f9L, 0x5ef47e1cL, 0x9029317cL,
++	0xfdf8e802L, 0x04272f70L, 0x80bb155cL, 0x05282ce3L,
++	0x95c11548L, 0xe4c66d22L, 0x48c1133fL, 0xc70f86dcL,
++	0x07f9c9eeL, 0x41041f0fL, 0x404779a4L, 0x5d886e17L,
++	0x325f51ebL, 0xd59bc0d1L, 0xf2bcc18fL, 0x41113564L,
++	0x257b7834L, 0x602a9c60L, 0xdff8e8a3L, 0x1f636c1bL,
++	0x0e12b4c2L, 0x02e1329eL, 0xaf664fd1L, 0xcad18115L,
++	0x6b2395e0L, 0x333e92e1L, 0x3b240b62L, 0xeebeb922L,
++	0x85b2a20eL, 0xe6ba0d99L, 0xde720c8cL, 0x2da2f728L,
++	0xd0127845L, 0x95b794fdL, 0x647d0862L, 0xe7ccf5f0L,
++	0x5449a36fL, 0x877d48faL, 0xc39dfd27L, 0xf33e8d1eL,
++	0x0a476341L, 0x992eff74L, 0x3a6f6eabL, 0xf4f8fd37L,
++	0xa812dc60L, 0xa1ebddf8L, 0x991be14cL, 0xdb6e6b0dL,
++	0xc67b5510L, 0x6d672c37L, 0x2765d43bL, 0xdcd0e804L,
++	0xf1290dc7L, 0xcc00ffa3L, 0xb5390f92L, 0x690fed0bL,
++	0x667b9ffbL, 0xcedb7d9cL, 0xa091cf0bL, 0xd9155ea3L,
++	0xbb132f88L, 0x515bad24L, 0x7b9479bfL, 0x763bd6ebL,
++	0x37392eb3L, 0xcc115979L, 0x8026e297L, 0xf42e312dL,
++	0x6842ada7L, 0xc66a2b3bL, 0x12754cccL, 0x782ef11cL,
++	0x6a124237L, 0xb79251e7L, 0x06a1bbe6L, 0x4bfb6350L,
++	0x1a6b1018L, 0x11caedfaL, 0x3d25bdd8L, 0xe2e1c3c9L,
++	0x44421659L, 0x0a121386L, 0xd90cec6eL, 0xd5abea2aL,
++	0x64af674eL, 0xda86a85fL, 0xbebfe988L, 0x64e4c3feL,
++	0x9dbc8057L, 0xf0f7c086L, 0x60787bf8L, 0x6003604dL,
++	0xd1fd8346L, 0xf6381fb0L, 0x7745ae04L, 0xd736fcccL,
++	0x83426b33L, 0xf01eab71L, 0xb0804187L, 0x3c005e5fL,
++	0x77a057beL, 0xbde8ae24L, 0x55464299L, 0xbf582e61L,
++	0x4e58f48fL, 0xf2ddfda2L, 0xf474ef38L, 0x8789bdc2L,
++	0x5366f9c3L, 0xc8b38e74L, 0xb475f255L, 0x46fcd9b9L,
++	0x7aeb2661L, 0x8b1ddf84L, 0x846a0e79L, 0x915f95e2L,
++	0x466e598eL, 0x20b45770L, 0x8cd55591L, 0xc902de4cL,
++	0xb90bace1L, 0xbb8205d0L, 0x11a86248L, 0x7574a99eL,
++	0xb77f19b6L, 0xe0a9dc09L, 0x662d09a1L, 0xc4324633L,
++	0xe85a1f02L, 0x09f0be8cL, 0x4a99a025L, 0x1d6efe10L,
++	0x1ab93d1dL, 0x0ba5a4dfL, 0xa186f20fL, 0x2868f169L,
++	0xdcb7da83L, 0x573906feL, 0xa1e2ce9bL, 0x4fcd7f52L,
++	0x50115e01L, 0xa70683faL, 0xa002b5c4L, 0x0de6d027L,
++	0x9af88c27L, 0x773f8641L, 0xc3604c06L, 0x61a806b5L,
++	0xf0177a28L, 0xc0f586e0L, 0x006058aaL, 0x30dc7d62L,
++	0x11e69ed7L, 0x2338ea63L, 0x53c2dd94L, 0xc2c21634L,
++	0xbbcbee56L, 0x90bcb6deL, 0xebfc7da1L, 0xce591d76L,
++	0x6f05e409L, 0x4b7c0188L, 0x39720a3dL, 0x7c927c24L,
++	0x86e3725fL, 0x724d9db9L, 0x1ac15bb4L, 0xd39eb8fcL,
++	0xed545578L, 0x08fca5b5L, 0xd83d7cd3L, 0x4dad0fc4L,
++	0x1e50ef5eL, 0xb161e6f8L, 0xa28514d9L, 0x6c51133cL,
++	0x6fd5c7e7L, 0x56e14ec4L, 0x362abfceL, 0xddc6c837L,
++	0xd79a3234L, 0x92638212L, 0x670efa8eL, 0x406000e0L,
++	0x3a39ce37L, 0xd3faf5cfL, 0xabc27737L, 0x5ac52d1bL,
++	0x5cb0679eL, 0x4fa33742L, 0xd3822740L, 0x99bc9bbeL,
++	0xd5118e9dL, 0xbf0f7315L, 0xd62d1c7eL, 0xc700c47bL,
++	0xb78c1b6bL, 0x21a19045L, 0xb26eb1beL, 0x6a366eb4L,
++	0x5748ab2fL, 0xbc946e79L, 0xc6a376d2L, 0x6549c2c8L,
++	0x530ff8eeL, 0x468dde7dL, 0xd5730a1dL, 0x4cd04dc6L,
++	0x2939bbdbL, 0xa9ba4650L, 0xac9526e8L, 0xbe5ee304L,
++	0xa1fad5f0L, 0x6a2d519aL, 0x63ef8ce2L, 0x9a86ee22L,
++	0xc089c2b8L, 0x43242ef6L, 0xa51e03aaL, 0x9cf2d0a4L,
++	0x83c061baL, 0x9be96a4dL, 0x8fe51550L, 0xba645bd6L,
++	0x2826a2f9L, 0xa73a3ae1L, 0x4ba99586L, 0xef5562e9L,
++	0xc72fefd3L, 0xf752f7daL, 0x3f046f69L, 0x77fa0a59L,
++	0x80e4a915L, 0x87b08601L, 0x9b09e6adL, 0x3b3ee593L,
++	0xe990fd5aL, 0x9e34d797L, 0x2cf0b7d9L, 0x022b8b51L,
++	0x96d5ac3aL, 0x017da67dL, 0xd1cf3ed6L, 0x7c7d2d28L,
++	0x1f9f25cfL, 0xadf2b89bL, 0x5ad6b472L, 0x5a88f54cL,
++	0xe029ac71L, 0xe019a5e6L, 0x47b0acfdL, 0xed93fa9bL,
++	0xe8d3c48dL, 0x283b57ccL, 0xf8d56629L, 0x79132e28L,
++	0x785f0191L, 0xed756055L, 0xf7960e44L, 0xe3d35e8cL,
++	0x15056dd4L, 0x88f46dbaL, 0x03a16125L, 0x0564f0bdL,
++	0xc3eb9e15L, 0x3c9057a2L, 0x97271aecL, 0xa93a072aL,
++	0x1b3f6d9bL, 0x1e6321f5L, 0xf59c66fbL, 0x26dcf319L,
++	0x7533d928L, 0xb155fdf5L, 0x03563482L, 0x8aba3cbbL,
++	0x28517711L, 0xc20ad9f8L, 0xabcc5167L, 0xccad925fL,
++	0x4de81751L, 0x3830dc8eL, 0x379d5862L, 0x9320f991L,
++	0xea7a90c2L, 0xfb3e7bceL, 0x5121ce64L, 0x774fbe32L,
++	0xa8b6e37eL, 0xc3293d46L, 0x48de5369L, 0x6413e680L,
++	0xa2ae0810L, 0xdd6db224L, 0x69852dfdL, 0x09072166L,
++	0xb39a460aL, 0x6445c0ddL, 0x586cdecfL, 0x1c20c8aeL,
++	0x5bbef7ddL, 0x1b588d40L, 0xccd2017fL, 0x6bb4e3bbL,
++	0xdda26a7eL, 0x3a59ff45L, 0x3e350a44L, 0xbcb4cdd5L,
++	0x72eacea8L, 0xfa6484bbL, 0x8d6612aeL, 0xbf3c6f47L,
++	0xd29be463L, 0x542f5d9eL, 0xaec2771bL, 0xf64e6370L,
++	0x740e0d8dL, 0xe75b1357L, 0xf8721671L, 0xaf537d5dL,
++	0x4040cb08L, 0x4eb4e2ccL, 0x34d2466aL, 0x0115af84L,
++	0xe1b00428L, 0x95983a1dL, 0x06b89fb4L, 0xce6ea048L,
++	0x6f3f3b82L, 0x3520ab82L, 0x011a1d4bL, 0x277227f8L,
++	0x611560b1L, 0xe7933fdcL, 0xbb3a792bL, 0x344525bdL,
++	0xa08839e1L, 0x51ce794bL, 0x2f32c9b7L, 0xa01fbac9L,
++	0xe01cc87eL, 0xbcc7d1f6L, 0xcf0111c3L, 0xa1e8aac7L,
++	0x1a908749L, 0xd44fbd9aL, 0xd0dadecbL, 0xd50ada38L,
++	0x0339c32aL, 0xc6913667L, 0x8df9317cL, 0xe0b12b4fL,
++	0xf79e59b7L, 0x43f5bb3aL, 0xf2d519ffL, 0x27d9459cL,
++	0xbf97222cL, 0x15e6fc2aL, 0x0f91fc71L, 0x9b941525L,
++	0xfae59361L, 0xceb69cebL, 0xc2a86459L, 0x12baa8d1L,
++	0xb6c1075eL, 0xe3056a0cL, 0x10d25065L, 0xcb03a442L,
++	0xe0ec6e0eL, 0x1698db3bL, 0x4c98a0beL, 0x3278e964L,
++	0x9f1f9532L, 0xe0d392dfL, 0xd3a0342bL, 0x8971f21eL,
++	0x1b0a7441L, 0x4ba3348cL, 0xc5be7120L, 0xc37632d8L,
++	0xdf359f8dL, 0x9b992f2eL, 0xe60b6f47L, 0x0fe3f11dL,
++	0xe54cda54L, 0x1edad891L, 0xce6279cfL, 0xcd3e7e6fL,
++	0x1618b166L, 0xfd2c1d05L, 0x848fd2c5L, 0xf6fb2299L,
++	0xf523f357L, 0xa6327623L, 0x93a83531L, 0x56cccd02L,
++	0xacf08162L, 0x5a75ebb5L, 0x6e163697L, 0x88d273ccL,
++	0xde966292L, 0x81b949d0L, 0x4c50901bL, 0x71c65614L,
++	0xe6c6c7bdL, 0x327a140aL, 0x45e1d006L, 0xc3f27b9aL,
++	0xc9aa53fdL, 0x62a80f00L, 0xbb25bfe2L, 0x35bdd2f6L,
++	0x71126905L, 0xb2040222L, 0xb6cbcf7cL, 0xcd769c2bL,
++	0x53113ec0L, 0x1640e3d3L, 0x38abbd60L, 0x2547adf0L,
++	0xba38209cL, 0xf746ce76L, 0x77afa1c5L, 0x20756060L,
++	0x85cbfe4eL, 0x8ae88dd8L, 0x7aaaf9b0L, 0x4cf9aa7eL,
++	0x1948c25cL, 0x02fb8a8cL, 0x01c36ae4L, 0xd6ebe1f9L,
++	0x90d4f869L, 0xa65cdea0L, 0x3f09252dL, 0xc208e69fL,
++	0xb74e6132L, 0xce77e25bL, 0x578fdfe3L, 0x3ac372e6L,
++	}
++	};
+diff -NarU5 a/bf_skey.c b/bf_skey.c
+--- a/bf_skey.c	1969-12-31 18:00:00.000000000 -0600
++++ b/bf_skey.c	2020-02-09 14:17:26.606158000 -0600
+@@ -0,0 +1,124 @@
++/*	$NetBSD: bf_skey.c,v 1.6 2005/12/11 12:20:48 christos Exp $	*/
++/*	$KAME: bf_skey.c,v 1.5 2000/11/06 13:58:08 itojun Exp $	*/
++ 
++/* crypto/bf/bf_skey.c */
++/* Copyright (C) 1995-1997 Eric Young (eay@mincom.oz.au)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@mincom.oz.au).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@mincom.oz.au).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@mincom.oz.au)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@mincom.oz.au)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++#include <sys/cdefs.h>
++ 
++#include <sys/types.h>
++#include <sys/time.h>
++#ifdef _KERNEL
++#include <sys/systm.h>
++#else
++#include <string.h>
++#endif
++#include "blowfish.h"
++#include "bf_locl.h"
++#include "bf_pi.h"
++ 
++void
++BF_set_key(BF_KEY *key, int len, const unsigned char *data)
++{
++	int i;
++	BF_LONG *p, ri, in[2];
++	const unsigned char *d, *end;
++ 
++	memcpy(key, &bf_init, sizeof(BF_KEY));
++	p = key->P;
++ 
++	if (len > ((BF_ROUNDS + 2) * 4))
++		len = (BF_ROUNDS + 2) * 4;
++ 
++	d = data;
++	end= &(data[len]);
++	for (i = 0; i < BF_ROUNDS + 2; i++) {
++		ri = *(d++);
++		if (d >= end) d = data;
++ 
++		ri <<= 8;
++		ri |= *(d++);
++		if (d >= end) d = data;
++ 
++		ri <<= 8;
++		ri |= *(d++);
++		if (d >= end) d = data;
++ 
++		ri <<= 8;
++		ri |= *(d++);
++		if (d >= end) d = data;
++ 
++		p[i] ^= ri;
++	}
++ 
++	in[0] = 0L;
++	in[1] = 0L;
++	for (i = 0; i < BF_ROUNDS + 2; i += 2) {
++		BF_encrypt(in, key);
++		p[i  ] = in[0];
++		p[i+1] = in[1];
++	}
++ 
++	p = key->S;
++	for (i = 0; i < 4 * 256; i += 2) {
++		BF_encrypt(in, key);
++		p[i  ] = in[0];
++		p[i+1] = in[1];
++	}
++}
++ 
+diff -NarU5 a/blowfish.h b/blowfish.h
+--- a/blowfish.h	1969-12-31 18:00:00.000000000 -0600
++++ b/blowfish.h	2020-02-09 14:17:36.955330000 -0600
+@@ -0,0 +1,95 @@
++/*	$NetBSD: blowfish.h,v 1.8 2009/03/14 14:46:08 dsl Exp $	*/
++/*	$KAME: blowfish.h,v 1.10 2000/09/18 21:21:20 itojun Exp $	*/
++ 
++/* crypto/bf/blowfish.h */
++/* Copyright (C) 1995-1997 Eric Young (eay@mincom.oz.au)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@mincom.oz.au).
++ * The implementation was written so as to conform with Netscapes SSL.
++ *
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@mincom.oz.au).
++ *
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@mincom.oz.au)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@mincom.oz.au)"
++ *
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ *
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++ 
++#ifndef HEADER_BLOWFISH_H
++#define HEADER_BLOWFISH_H
++ 
++#ifdef  __cplusplus
++extern "C" {
++#endif
++ 
++#define BF_ENCRYPT	1
++#define BF_DECRYPT	0
++ 
++/* must be 32bit quantity */
++#define BF_LONG u_int32_t
++ 
++#define BF_ROUNDS	16
++#define BF_BLOCK	8
++ 
++typedef struct bf_key_st {
++	BF_LONG P[BF_ROUNDS+2];
++	BF_LONG S[4*256];
++} BF_KEY;
++ 
++void BF_set_key(BF_KEY *, int, const unsigned char *);
++void BF_encrypt(BF_LONG *, const BF_KEY *);
++void BF_decrypt(BF_LONG *, const BF_KEY *);
++void BF_cbc_encrypt(const unsigned char *, unsigned char *, long,
++		    const BF_KEY *, unsigned char *, int);
++void BF_ecb_encrypt(const unsigned char *, unsigned char *,
++		    const BF_KEY *, int);
++ 
++#ifdef  __cplusplus
++}
++#endif
++ 
++#endif
+diff -NarU5 a/Makefile.in b/Makefile.in
+--- a/Makefile.in	2012-07-08 23:55:38.000000000 -0500
++++ b/Makefile.in	2020-02-09 14:16:30.213976001 -0600
+@@ -46,11 +46,11 @@
+ 
+ DEFS = -DVTUN_CONFIG_FILE=\"$(CFG_FILE)\" -DVTUN_PID_FILE=\"$(PID_FILE)\" \
+        -DVTUN_STAT_DIR=\"$(STAT_DIR)\" -DVTUN_LOCK_DIR=\"$(LOCK_DIR)\"
+ 
+ OBJS = main.o cfg_file.tab.o cfg_file.lex.o server.o client.o lib.o \
+-       llist.o auth.o tunnel.o lock.o netlib.o  \
++       llist.o auth.o bf_cbc.o bf_ecb.o bf_enc.o bf_skey.o md5_dgst.o md5_one.o  tunnel.o lock.o netlib.o  \
+        tun_dev.o tap_dev.o pty_dev.o pipe_dev.o \
+        tcp_proto.o udp_proto.o \
+        linkfd.o lfd_shaper.o lfd_zlib.o lfd_lzo.o lfd_encrypt.o lfd_legacy_encrypt.o
+ 
+ CONFIGURE_FILES = Makefile config.status config.cache config.h config.log 
+diff -NarU5 a/md5_dgst.c b/md5_dgst.c
+--- a/md5_dgst.c	1969-12-31 18:00:00.000000000 -0600
++++ b/md5_dgst.c	2020-02-09 14:17:49.545622000 -0600
+@@ -0,0 +1,440 @@
++/* crypto/md5/md5_dgst.c */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ * 
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ * 
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ * 
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from 
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ * 
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ * 
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++
++#include <stdio.h>
++#include "md5_locl.h"
++
++char *MD5_version="MD5 part of SSLeay 0.9.1a 06-Jul-1998";
++
++/* Implemented from RFC1321 The MD5 Message-Digest Algorithm
++ */
++
++#define INIT_DATA_A (unsigned long)0x67452301L
++#define INIT_DATA_B (unsigned long)0xefcdab89L
++#define INIT_DATA_C (unsigned long)0x98badcfeL
++#define INIT_DATA_D (unsigned long)0x10325476L
++
++#ifndef NOPROTO
++#  ifdef MD5_ASM
++     void md5_block_x86(MD5_CTX *c, unsigned long *p,int num);
++#    define md5_block md5_block_x86
++#  else
++     static void md5_block(MD5_CTX *c, unsigned long *p,int num);
++#  endif
++#else
++#  ifdef MD5_ASM
++     void md5_block_x86();
++#    define md5_block md5_block_x86
++#  else
++     static void md5_block();
++#  endif
++#endif
++
++void MD5_Init(c)
++MD5_CTX *c;
++	{
++	c->A=INIT_DATA_A;
++	c->B=INIT_DATA_B;
++	c->C=INIT_DATA_C;
++	c->D=INIT_DATA_D;
++	c->Nl=0;
++	c->Nh=0;
++	c->num=0;
++	}
++
++void MD5_Update(c, data, len)
++MD5_CTX *c;
++register unsigned char *data;
++unsigned long len;
++	{
++	register ULONG *p;
++	int sw,sc;
++	ULONG l;
++
++	if (len == 0) return;
++
++	l=(c->Nl+(len<<3))&0xffffffffL;
++	/* 95-05-24 eay Fixed a bug with the overflow handling, thanks to
++	 * Wei Dai <weidai@eskimo.com> for pointing it out. */
++	if (l < c->Nl) /* overflow */
++		c->Nh++;
++	c->Nh+=(len>>29);
++	c->Nl=l;
++
++	if (c->num != 0)
++		{
++		p=c->data;
++		sw=c->num>>2;
++		sc=c->num&0x03;
++
++		if ((c->num+len) >= MD5_CBLOCK)
++			{
++			l= p[sw];
++			p_c2l(data,l,sc);
++			p[sw++]=l;
++			for (; sw<MD5_LBLOCK; sw++)
++				{
++				c2l(data,l);
++				p[sw]=l;
++				}
++			len-=(MD5_CBLOCK-c->num);
++
++			md5_block(c,p,64);
++			c->num=0;
++			/* drop through and do the rest */
++			}
++		else
++			{
++			int ew,ec;
++
++			c->num+=(int)len;
++			if ((sc+len) < 4) /* ugly, add char's to a word */
++				{
++				l= p[sw];
++				p_c2l_p(data,l,sc,len);
++				p[sw]=l;
++				}
++			else
++				{
++				ew=(c->num>>2);
++				ec=(c->num&0x03);
++				l= p[sw];
++				p_c2l(data,l,sc);
++				p[sw++]=l;
++				for (; sw < ew; sw++)
++					{ c2l(data,l); p[sw]=l; }
++				if (ec)
++					{
++					c2l_p(data,l,ec);
++					p[sw]=l;
++					}
++				}
++			return;
++			}
++		}
++	/* we now can process the input data in blocks of MD5_CBLOCK
++	 * chars and save the leftovers to c->data. */
++#ifdef L_ENDIAN
++	if ((((unsigned long)data)%sizeof(ULONG)) == 0)
++		{
++		sw=(int)len/MD5_CBLOCK;
++		if (sw > 0)
++			{
++			sw*=MD5_CBLOCK;
++			md5_block(c,(ULONG *)data,sw);
++			data+=sw;
++			len-=sw;
++			}
++		}
++#endif
++	p=c->data;
++	while (len >= MD5_CBLOCK)
++		{
++#if defined(L_ENDIAN) || defined(B_ENDIAN)
++		if (p != (unsigned long *)data)
++			memcpy(p,data,MD5_CBLOCK);
++		data+=MD5_CBLOCK;
++#ifdef B_ENDIAN
++		for (sw=(MD5_LBLOCK/4); sw; sw--)
++			{
++			Endian_Reverse32(p[0]);
++			Endian_Reverse32(p[1]);
++			Endian_Reverse32(p[2]);
++			Endian_Reverse32(p[3]);
++			p+=4;
++			}
++#endif
++#else
++		for (sw=(MD5_LBLOCK/4); sw; sw--)
++			{
++			c2l(data,l); *(p++)=l;
++			c2l(data,l); *(p++)=l;
++			c2l(data,l); *(p++)=l;
++			c2l(data,l); *(p++)=l; 
++			} 
++#endif
++		p=c->data;
++		md5_block(c,p,64);
++		len-=MD5_CBLOCK;
++		}
++	sc=(int)len;
++	c->num=sc;
++	if (sc)
++		{
++		sw=sc>>2;	/* words to copy */
++#ifdef L_ENDIAN
++		p[sw]=0;
++		memcpy(p,data,sc);
++#else
++		sc&=0x03;
++		for ( ; sw; sw--)
++			{ c2l(data,l); *(p++)=l; }
++		c2l_p(data,l,sc);
++		*p=l;
++#endif
++		}
++	}
++
++void MD5_Transform(c,b)
++MD5_CTX *c;
++unsigned char *b;
++	{
++	ULONG p[16];
++#if !defined(L_ENDIAN)
++	ULONG *q;
++	int i;
++#endif
++
++#if defined(B_ENDIAN) || defined(L_ENDIAN)
++	memcpy(p,b,64);
++#ifdef B_ENDIAN
++	q=p;
++	for (i=(MD5_LBLOCK/4); i; i--)
++		{
++		Endian_Reverse32(q[0]);
++		Endian_Reverse32(q[1]);
++		Endian_Reverse32(q[2]);
++		Endian_Reverse32(q[3]);
++		q+=4;
++		}
++#endif
++#else
++	q=p;
++	for (i=(MD5_LBLOCK/4); i; i--)
++		{
++		ULONG l;
++		c2l(b,l); *(q++)=l;
++		c2l(b,l); *(q++)=l;
++		c2l(b,l); *(q++)=l;
++		c2l(b,l); *(q++)=l; 
++		} 
++#endif
++	md5_block(c,p,64);
++	}
++
++#ifndef MD5_ASM
++
++static void md5_block(c, X, num)
++MD5_CTX *c;
++register ULONG *X;
++int num;
++	{
++	register ULONG A,B,C,D;
++
++	A=c->A;
++	B=c->B;
++	C=c->C;
++	D=c->D;
++	for (;;)
++		{
++	/* Round 0 */
++	R0(A,B,C,D,X[ 0], 7,0xd76aa478L);
++	R0(D,A,B,C,X[ 1],12,0xe8c7b756L);
++	R0(C,D,A,B,X[ 2],17,0x242070dbL);
++	R0(B,C,D,A,X[ 3],22,0xc1bdceeeL);
++	R0(A,B,C,D,X[ 4], 7,0xf57c0fafL);
++	R0(D,A,B,C,X[ 5],12,0x4787c62aL);
++	R0(C,D,A,B,X[ 6],17,0xa8304613L);
++	R0(B,C,D,A,X[ 7],22,0xfd469501L);
++	R0(A,B,C,D,X[ 8], 7,0x698098d8L);
++	R0(D,A,B,C,X[ 9],12,0x8b44f7afL);
++	R0(C,D,A,B,X[10],17,0xffff5bb1L);
++	R0(B,C,D,A,X[11],22,0x895cd7beL);
++	R0(A,B,C,D,X[12], 7,0x6b901122L);
++	R0(D,A,B,C,X[13],12,0xfd987193L);
++	R0(C,D,A,B,X[14],17,0xa679438eL);
++	R0(B,C,D,A,X[15],22,0x49b40821L);
++	/* Round 1 */
++	R1(A,B,C,D,X[ 1], 5,0xf61e2562L);
++	R1(D,A,B,C,X[ 6], 9,0xc040b340L);
++	R1(C,D,A,B,X[11],14,0x265e5a51L);
++	R1(B,C,D,A,X[ 0],20,0xe9b6c7aaL);
++	R1(A,B,C,D,X[ 5], 5,0xd62f105dL);
++	R1(D,A,B,C,X[10], 9,0x02441453L);
++	R1(C,D,A,B,X[15],14,0xd8a1e681L);
++	R1(B,C,D,A,X[ 4],20,0xe7d3fbc8L);
++	R1(A,B,C,D,X[ 9], 5,0x21e1cde6L);
++	R1(D,A,B,C,X[14], 9,0xc33707d6L);
++	R1(C,D,A,B,X[ 3],14,0xf4d50d87L);
++	R1(B,C,D,A,X[ 8],20,0x455a14edL);
++	R1(A,B,C,D,X[13], 5,0xa9e3e905L);
++	R1(D,A,B,C,X[ 2], 9,0xfcefa3f8L);
++	R1(C,D,A,B,X[ 7],14,0x676f02d9L);
++	R1(B,C,D,A,X[12],20,0x8d2a4c8aL);
++	/* Round 2 */
++	R2(A,B,C,D,X[ 5], 4,0xfffa3942L);
++	R2(D,A,B,C,X[ 8],11,0x8771f681L);
++	R2(C,D,A,B,X[11],16,0x6d9d6122L);
++	R2(B,C,D,A,X[14],23,0xfde5380cL);
++	R2(A,B,C,D,X[ 1], 4,0xa4beea44L);
++	R2(D,A,B,C,X[ 4],11,0x4bdecfa9L);
++	R2(C,D,A,B,X[ 7],16,0xf6bb4b60L);
++	R2(B,C,D,A,X[10],23,0xbebfbc70L);
++	R2(A,B,C,D,X[13], 4,0x289b7ec6L);
++	R2(D,A,B,C,X[ 0],11,0xeaa127faL);
++	R2(C,D,A,B,X[ 3],16,0xd4ef3085L);
++	R2(B,C,D,A,X[ 6],23,0x04881d05L);
++	R2(A,B,C,D,X[ 9], 4,0xd9d4d039L);
++	R2(D,A,B,C,X[12],11,0xe6db99e5L);
++	R2(C,D,A,B,X[15],16,0x1fa27cf8L);
++	R2(B,C,D,A,X[ 2],23,0xc4ac5665L);
++	/* Round 3 */
++	R3(A,B,C,D,X[ 0], 6,0xf4292244L);
++	R3(D,A,B,C,X[ 7],10,0x432aff97L);
++	R3(C,D,A,B,X[14],15,0xab9423a7L);
++	R3(B,C,D,A,X[ 5],21,0xfc93a039L);
++	R3(A,B,C,D,X[12], 6,0x655b59c3L);
++	R3(D,A,B,C,X[ 3],10,0x8f0ccc92L);
++	R3(C,D,A,B,X[10],15,0xffeff47dL);
++	R3(B,C,D,A,X[ 1],21,0x85845dd1L);
++	R3(A,B,C,D,X[ 8], 6,0x6fa87e4fL);
++	R3(D,A,B,C,X[15],10,0xfe2ce6e0L);
++	R3(C,D,A,B,X[ 6],15,0xa3014314L);
++	R3(B,C,D,A,X[13],21,0x4e0811a1L);
++	R3(A,B,C,D,X[ 4], 6,0xf7537e82L);
++	R3(D,A,B,C,X[11],10,0xbd3af235L);
++	R3(C,D,A,B,X[ 2],15,0x2ad7d2bbL);
++	R3(B,C,D,A,X[ 9],21,0xeb86d391L);
++
++	A+=c->A&0xffffffffL;
++	B+=c->B&0xffffffffL;
++	c->A=A;
++	c->B=B;
++	C+=c->C&0xffffffffL;
++	D+=c->D&0xffffffffL;
++	c->C=C;
++	c->D=D;
++	X+=16;
++	num-=64;
++	if (num <= 0) break;
++		}
++	}
++#endif
++
++void MD5_Final(md, c)
++unsigned char *md;
++MD5_CTX *c;
++	{
++	register int i,j;
++	register ULONG l;
++	register ULONG *p;
++	static unsigned char end[4]={0x80,0x00,0x00,0x00};
++	unsigned char *cp=end;
++
++	/* c->num should definitly have room for at least one more byte. */
++	p=c->data;
++	j=c->num;
++	i=j>>2;
++
++	/* purify often complains about the following line as an
++	 * Uninitialized Memory Read.  While this can be true, the
++	 * following p_c2l macro will reset l when that case is true.
++	 * This is because j&0x03 contains the number of 'valid' bytes
++	 * already in p[i].  If and only if j&0x03 == 0, the UMR will
++	 * occur but this is also the only time p_c2l will do
++	 * l= *(cp++) instead of l|= *(cp++)
++	 * Many thanks to Alex Tang <altitude@cic.net> for pickup this
++	 * 'potential bug' */
++#ifdef PURIFY
++	if ((j&0x03) == 0) p[i]=0;
++#endif
++	l=p[i];
++	p_c2l(cp,l,j&0x03);
++	p[i]=l;
++	i++;
++	/* i is the next 'undefined word' */
++	if (c->num >= MD5_LAST_BLOCK)
++		{
++		for (; i<MD5_LBLOCK; i++)
++			p[i]=0;
++		md5_block(c,p,64);
++		i=0;
++		}
++	for (; i<(MD5_LBLOCK-2); i++)
++		p[i]=0;
++	p[MD5_LBLOCK-2]=c->Nl;
++	p[MD5_LBLOCK-1]=c->Nh;
++	md5_block(c,p,64);
++	cp=md;
++	l=c->A; l2c(l,cp);
++	l=c->B; l2c(l,cp);
++	l=c->C; l2c(l,cp);
++	l=c->D; l2c(l,cp);
++
++	/* clear stuff, md5_block may be leaving some stuff on the stack
++	 * but I'm not worried :-) */
++	c->num=0;
++/*	memset((char *)&c,0,sizeof(c));*/
++	}
++
++#ifdef undef
++int printit(l)
++unsigned long *l;
++	{
++	int i,ii;
++
++	for (i=0; i<2; i++)
++		{
++		for (ii=0; ii<8; ii++)
++			{
++			fprintf(stderr,"%08lx ",l[i*8+ii]);
++			}
++		fprintf(stderr,"\n");
++		}
++	}
++#endif
+diff -NarU5 a/md5.h b/md5.h
+--- a/md5.h	1969-12-31 18:00:00.000000000 -0600
++++ b/md5.h	2020-02-09 14:17:45.599650000 -0600
+@@ -0,0 +1,99 @@
++/* crypto/md5/md5.h */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ * 
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ * 
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ * 
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from 
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ * 
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ * 
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++
++#ifndef HEADER_MD5_H
++#define HEADER_MD5_H
++
++#ifdef  __cplusplus
++extern "C" {
++#endif
++
++#define MD5_CBLOCK	64
++#define MD5_LBLOCK	16
++#define MD5_BLOCK	16
++#define MD5_LAST_BLOCK  56
++#define MD5_LENGTH_BLOCK 8
++#define MD5_DIGEST_LENGTH 16
++
++typedef struct MD5state_st
++	{
++	unsigned long A,B,C,D;
++	unsigned long Nl,Nh;
++	unsigned long data[MD5_LBLOCK];
++	int num;
++	} MD5_CTX;
++
++#ifndef NOPROTO
++void MD5_Init(MD5_CTX *c);
++void MD5_Update(MD5_CTX *c, unsigned char *data, unsigned long len);
++void MD5_Final(unsigned char *md, MD5_CTX *c);
++unsigned char *MD5(unsigned char *d, unsigned long n, unsigned char *md);
++void MD5_Transform(MD5_CTX *c, unsigned char *b);
++#else
++void MD5_Init();
++void MD5_Update();
++void MD5_Final();
++unsigned char *MD5();
++void MD5_Transform();
++#endif
++
++#ifdef  __cplusplus
++}
++#endif
++
++#endif
+diff -NarU5 a/md5_locl.h b/md5_locl.h
+--- a/md5_locl.h	1969-12-31 18:00:00.000000000 -0600
++++ b/md5_locl.h	2020-02-09 14:17:45.615658000 -0600
+@@ -0,0 +1,195 @@
++/* crypto/md5/md5_locl.h */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ * 
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ * 
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ * 
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from 
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ * 
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ * 
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++
++/* On sparc, this actually slows things down :-( */
++#if defined(sun)
++#undef B_ENDIAN
++#endif
++
++#include <stdlib.h>
++#include <string.h>
++#include "md5.h"
++
++#define ULONG	unsigned long
++#define UCHAR	unsigned char
++#define UINT	unsigned int
++
++#if defined(NOCONST)
++#define const
++#endif
++
++#undef c2l
++#define c2l(c,l)	(l = ((unsigned long)(*((c)++)))     , \
++			 l|=(((unsigned long)(*((c)++)))<< 8), \
++			 l|=(((unsigned long)(*((c)++)))<<16), \
++			 l|=(((unsigned long)(*((c)++)))<<24))
++
++#undef p_c2l
++#define p_c2l(c,l,n)	{ \
++			switch (n) { \
++			case 0: l =((unsigned long)(*((c)++))); \
++			case 1: l|=((unsigned long)(*((c)++)))<< 8; \
++			case 2: l|=((unsigned long)(*((c)++)))<<16; \
++			case 3: l|=((unsigned long)(*((c)++)))<<24; \
++				} \
++			}
++
++/* NOTE the pointer is not incremented at the end of this */
++#undef c2l_p
++#define c2l_p(c,l,n)	{ \
++			l=0; \
++			(c)+=n; \
++			switch (n) { \
++			case 3: l =((unsigned long)(*(--(c))))<<16; \
++			case 2: l|=((unsigned long)(*(--(c))))<< 8; \
++			case 1: l|=((unsigned long)(*(--(c))))    ; \
++				} \
++			}
++
++#undef p_c2l_p
++#define p_c2l_p(c,l,sc,len) { \
++			switch (sc) \
++				{ \
++			case 0: l =((unsigned long)(*((c)++))); \
++				if (--len == 0) break; \
++			case 1: l|=((unsigned long)(*((c)++)))<< 8; \
++				if (--len == 0) break; \
++			case 2: l|=((unsigned long)(*((c)++)))<<16; \
++				} \
++			}
++
++#undef l2c
++#define l2c(l,c)	(*((c)++)=(unsigned char)(((l)    )&0xff), \
++			 *((c)++)=(unsigned char)(((l)>> 8)&0xff), \
++			 *((c)++)=(unsigned char)(((l)>>16)&0xff), \
++			 *((c)++)=(unsigned char)(((l)>>24)&0xff))
++
++/* NOTE - c is not incremented as per l2c */
++#undef l2cn
++#define l2cn(l1,l2,c,n)	{ \
++			c+=n; \
++			switch (n) { \
++			case 8: *(--(c))=(unsigned char)(((l2)>>24)&0xff); \
++			case 7: *(--(c))=(unsigned char)(((l2)>>16)&0xff); \
++			case 6: *(--(c))=(unsigned char)(((l2)>> 8)&0xff); \
++			case 5: *(--(c))=(unsigned char)(((l2)    )&0xff); \
++			case 4: *(--(c))=(unsigned char)(((l1)>>24)&0xff); \
++			case 3: *(--(c))=(unsigned char)(((l1)>>16)&0xff); \
++			case 2: *(--(c))=(unsigned char)(((l1)>> 8)&0xff); \
++			case 1: *(--(c))=(unsigned char)(((l1)    )&0xff); \
++				} \
++			}
++
++/* A nice byte order reversal from Wei Dai <weidai@eskimo.com> */
++#if defined(WIN32)
++/* 5 instructions with rotate instruction, else 9 */
++#define Endian_Reverse32(a) \
++	{ \
++	unsigned long l=(a); \
++	(a)=((ROTATE(l,8)&0x00FF00FF)|(ROTATE(l,24)&0xFF00FF00)); \
++	}
++#else
++/* 6 instructions with rotate instruction, else 8 */
++#define Endian_Reverse32(a) \
++	{ \
++	unsigned long l=(a); \
++	l=(((l&0xFF00FF00)>>8L)|((l&0x00FF00FF)<<8L)); \
++	(a)=ROTATE(l,16L); \
++	}
++#endif
++/*
++#define	F(x,y,z)	(((x) & (y))  |  ((~(x)) & (z)))
++#define	G(x,y,z)	(((x) & (z))  |  ((y) & (~(z))))
++*/
++
++/* As pointed out by Wei Dai <weidai@eskimo.com>, the above can be
++ * simplified to the code below.  Wei attributes these optimisations
++ * to Peter Gutmann's SHS code, and he attributes it to Rich Schroeppel.
++ */
++#define	F(b,c,d)	((((c) ^ (d)) & (b)) ^ (d))
++#define	G(b,c,d)	((((b) ^ (c)) & (d)) ^ (c))
++#define	H(b,c,d)	((b) ^ (c) ^ (d))
++#define	I(b,c,d)	(((~(d)) | (b)) ^ (c))
++
++#undef ROTATE
++#if defined(WIN32)
++#define ROTATE(a,n)     _lrotl(a,n)
++#else
++#define ROTATE(a,n)     (((a)<<(n))|(((a)&0xffffffff)>>(32-(n))))
++#endif
++
++
++#define R0(a,b,c,d,k,s,t) { \
++	a+=((k)+(t)+F((b),(c),(d))); \
++	a=ROTATE(a,s); \
++	a+=b; };\
++
++#define R1(a,b,c,d,k,s,t) { \
++	a+=((k)+(t)+G((b),(c),(d))); \
++	a=ROTATE(a,s); \
++	a+=b; };
++
++#define R2(a,b,c,d,k,s,t) { \
++	a+=((k)+(t)+H((b),(c),(d))); \
++	a=ROTATE(a,s); \
++	a+=b; };
++
++#define R3(a,b,c,d,k,s,t) { \
++	a+=((k)+(t)+I((b),(c),(d))); \
++	a=ROTATE(a,s); \
++	a+=b; };
+diff -NarU5 a/md5_one.c b/md5_one.c
+--- a/md5_one.c	1969-12-31 18:00:00.000000000 -0600
++++ b/md5_one.c	2020-02-09 14:17:49.561629999 -0600
+@@ -0,0 +1,77 @@
++/* crypto/md5/md5_one.c */
++/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
++ * All rights reserved.
++ *
++ * This package is an SSL implementation written
++ * by Eric Young (eay@cryptsoft.com).
++ * The implementation was written so as to conform with Netscapes SSL.
++ * 
++ * This library is free for commercial and non-commercial use as long as
++ * the following conditions are aheared to.  The following conditions
++ * apply to all code found in this distribution, be it the RC4, RSA,
++ * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
++ * included with this distribution is covered by the same copyright terms
++ * except that the holder is Tim Hudson (tjh@cryptsoft.com).
++ * 
++ * Copyright remains Eric Young's, and as such any Copyright notices in
++ * the code are not to be removed.
++ * If this package is used in a product, Eric Young should be given attribution
++ * as the author of the parts of the library used.
++ * This can be in the form of a textual message at program startup or
++ * in documentation (online or textual) provided with the package.
++ * 
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ * 3. All advertising materials mentioning features or use of this software
++ *    must display the following acknowledgement:
++ *    "This product includes cryptographic software written by
++ *     Eric Young (eay@cryptsoft.com)"
++ *    The word 'cryptographic' can be left out if the rouines from the library
++ *    being used are not cryptographic related :-).
++ * 4. If you include any Windows specific code (or a derivative thereof) from 
++ *    the apps directory (application code) you must include an acknowledgement:
++ *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
++ * 
++ * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
++ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
++ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
++ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
++ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
++ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
++ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
++ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
++ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
++ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
++ * SUCH DAMAGE.
++ * 
++ * The licence and distribution terms for any publically available version or
++ * derivative of this code cannot be changed.  i.e. this code cannot simply be
++ * copied and put under another distribution licence
++ * [including the GNU Public Licence.]
++ */
++
++#include <stdio.h>
++#include "md5_locl.h"
++
++unsigned char *MD5(d, n, md)
++unsigned char *d;
++unsigned long n;
++unsigned char *md;
++	{
++	MD5_CTX c;
++	static unsigned char m[MD5_DIGEST_LENGTH];
++
++	if (md == NULL) md=m;
++	MD5_Init(&c);
++	MD5_Update(&c,d,n);
++	MD5_Final(md,&c);
++	memset(&c,0,sizeof(c)); /* security consideration */
++	return(md);
++	}
++
